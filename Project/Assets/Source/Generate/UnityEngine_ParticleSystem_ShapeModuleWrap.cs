//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_ParticleSystem_ShapeModuleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.ParticleSystem.ShapeModule), null);
		L.RegFunction("New", new LuaCSFunction(_CreateUnityEngine_ParticleSystem_ShapeModule));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("enabled", new LuaCSFunction(get_enabled), new LuaCSFunction(set_enabled));
		L.RegVar("shapeType", new LuaCSFunction(get_shapeType), new LuaCSFunction(set_shapeType));
		L.RegVar("randomDirectionAmount", new LuaCSFunction(get_randomDirectionAmount), new LuaCSFunction(set_randomDirectionAmount));
		L.RegVar("sphericalDirectionAmount", new LuaCSFunction(get_sphericalDirectionAmount), new LuaCSFunction(set_sphericalDirectionAmount));
		L.RegVar("randomPositionAmount", new LuaCSFunction(get_randomPositionAmount), new LuaCSFunction(set_randomPositionAmount));
		L.RegVar("alignToDirection", new LuaCSFunction(get_alignToDirection), new LuaCSFunction(set_alignToDirection));
		L.RegVar("radius", new LuaCSFunction(get_radius), new LuaCSFunction(set_radius));
		L.RegVar("radiusMode", new LuaCSFunction(get_radiusMode), new LuaCSFunction(set_radiusMode));
		L.RegVar("radiusSpread", new LuaCSFunction(get_radiusSpread), new LuaCSFunction(set_radiusSpread));
		L.RegVar("radiusSpeed", new LuaCSFunction(get_radiusSpeed), new LuaCSFunction(set_radiusSpeed));
		L.RegVar("radiusSpeedMultiplier", new LuaCSFunction(get_radiusSpeedMultiplier), new LuaCSFunction(set_radiusSpeedMultiplier));
		L.RegVar("radiusThickness", new LuaCSFunction(get_radiusThickness), new LuaCSFunction(set_radiusThickness));
		L.RegVar("angle", new LuaCSFunction(get_angle), new LuaCSFunction(set_angle));
		L.RegVar("length", new LuaCSFunction(get_length), new LuaCSFunction(set_length));
		L.RegVar("boxThickness", new LuaCSFunction(get_boxThickness), new LuaCSFunction(set_boxThickness));
		L.RegVar("meshShapeType", new LuaCSFunction(get_meshShapeType), new LuaCSFunction(set_meshShapeType));
		L.RegVar("mesh", new LuaCSFunction(get_mesh), new LuaCSFunction(set_mesh));
		L.RegVar("meshRenderer", new LuaCSFunction(get_meshRenderer), new LuaCSFunction(set_meshRenderer));
		L.RegVar("skinnedMeshRenderer", new LuaCSFunction(get_skinnedMeshRenderer), new LuaCSFunction(set_skinnedMeshRenderer));
		L.RegVar("sprite", new LuaCSFunction(get_sprite), new LuaCSFunction(set_sprite));
		L.RegVar("spriteRenderer", new LuaCSFunction(get_spriteRenderer), new LuaCSFunction(set_spriteRenderer));
		L.RegVar("useMeshMaterialIndex", new LuaCSFunction(get_useMeshMaterialIndex), new LuaCSFunction(set_useMeshMaterialIndex));
		L.RegVar("meshMaterialIndex", new LuaCSFunction(get_meshMaterialIndex), new LuaCSFunction(set_meshMaterialIndex));
		L.RegVar("useMeshColors", new LuaCSFunction(get_useMeshColors), new LuaCSFunction(set_useMeshColors));
		L.RegVar("normalOffset", new LuaCSFunction(get_normalOffset), new LuaCSFunction(set_normalOffset));
		L.RegVar("meshSpawnMode", new LuaCSFunction(get_meshSpawnMode), new LuaCSFunction(set_meshSpawnMode));
		L.RegVar("meshSpawnSpread", new LuaCSFunction(get_meshSpawnSpread), new LuaCSFunction(set_meshSpawnSpread));
		L.RegVar("meshSpawnSpeed", new LuaCSFunction(get_meshSpawnSpeed), new LuaCSFunction(set_meshSpawnSpeed));
		L.RegVar("meshSpawnSpeedMultiplier", new LuaCSFunction(get_meshSpawnSpeedMultiplier), new LuaCSFunction(set_meshSpawnSpeedMultiplier));
		L.RegVar("arc", new LuaCSFunction(get_arc), new LuaCSFunction(set_arc));
		L.RegVar("arcMode", new LuaCSFunction(get_arcMode), new LuaCSFunction(set_arcMode));
		L.RegVar("arcSpread", new LuaCSFunction(get_arcSpread), new LuaCSFunction(set_arcSpread));
		L.RegVar("arcSpeed", new LuaCSFunction(get_arcSpeed), new LuaCSFunction(set_arcSpeed));
		L.RegVar("arcSpeedMultiplier", new LuaCSFunction(get_arcSpeedMultiplier), new LuaCSFunction(set_arcSpeedMultiplier));
		L.RegVar("donutRadius", new LuaCSFunction(get_donutRadius), new LuaCSFunction(set_donutRadius));
		L.RegVar("position", new LuaCSFunction(get_position), new LuaCSFunction(set_position));
		L.RegVar("rotation", new LuaCSFunction(get_rotation), new LuaCSFunction(set_rotation));
		L.RegVar("scale", new LuaCSFunction(get_scale), new LuaCSFunction(set_scale));
		L.RegVar("texture", new LuaCSFunction(get_texture), new LuaCSFunction(set_texture));
		L.RegVar("textureClipChannel", new LuaCSFunction(get_textureClipChannel), new LuaCSFunction(set_textureClipChannel));
		L.RegVar("textureClipThreshold", new LuaCSFunction(get_textureClipThreshold), new LuaCSFunction(set_textureClipThreshold));
		L.RegVar("textureColorAffectsParticles", new LuaCSFunction(get_textureColorAffectsParticles), new LuaCSFunction(set_textureColorAffectsParticles));
		L.RegVar("textureAlphaAffectsParticles", new LuaCSFunction(get_textureAlphaAffectsParticles), new LuaCSFunction(set_textureAlphaAffectsParticles));
		L.RegVar("textureBilinearFiltering", new LuaCSFunction(get_textureBilinearFiltering), new LuaCSFunction(set_textureBilinearFiltering));
		L.RegVar("textureUVChannel", new LuaCSFunction(get_textureUVChannel), new LuaCSFunction(set_textureUVChannel));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_ParticleSystem_ShapeModule(IntPtr L)
	{
		UnityEngine.ParticleSystem.ShapeModule obj = new UnityEngine.ParticleSystem.ShapeModule();
		ToLua.PushValue(L, obj);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			bool ret = obj.enabled;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enabled on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_shapeType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.ParticleSystemShapeType ret = obj.shapeType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index shapeType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_randomDirectionAmount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float ret = obj.randomDirectionAmount;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index randomDirectionAmount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sphericalDirectionAmount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float ret = obj.sphericalDirectionAmount;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sphericalDirectionAmount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_randomPositionAmount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float ret = obj.randomPositionAmount;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index randomPositionAmount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_alignToDirection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			bool ret = obj.alignToDirection;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index alignToDirection on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_radius(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float ret = obj.radius;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index radius on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_radiusMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.ParticleSystemShapeMultiModeValue ret = obj.radiusMode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index radiusMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_radiusSpread(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float ret = obj.radiusSpread;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index radiusSpread on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_radiusSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve ret = obj.radiusSpeed;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index radiusSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_radiusSpeedMultiplier(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float ret = obj.radiusSpeedMultiplier;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index radiusSpeedMultiplier on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_radiusThickness(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float ret = obj.radiusThickness;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index radiusThickness on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_angle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float ret = obj.angle;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index angle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_length(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float ret = obj.length;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index length on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_boxThickness(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.Vector3 ret = obj.boxThickness;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index boxThickness on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_meshShapeType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.ParticleSystemMeshShapeType ret = obj.meshShapeType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index meshShapeType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mesh(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.Mesh ret = obj.mesh;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mesh on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_meshRenderer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.MeshRenderer ret = obj.meshRenderer;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index meshRenderer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_skinnedMeshRenderer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.SkinnedMeshRenderer ret = obj.skinnedMeshRenderer;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index skinnedMeshRenderer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sprite(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.Sprite ret = obj.sprite;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sprite on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_spriteRenderer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.SpriteRenderer ret = obj.spriteRenderer;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index spriteRenderer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useMeshMaterialIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			bool ret = obj.useMeshMaterialIndex;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useMeshMaterialIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_meshMaterialIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			int ret = obj.meshMaterialIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index meshMaterialIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useMeshColors(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			bool ret = obj.useMeshColors;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useMeshColors on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_normalOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float ret = obj.normalOffset;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index normalOffset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_meshSpawnMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.ParticleSystemShapeMultiModeValue ret = obj.meshSpawnMode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index meshSpawnMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_meshSpawnSpread(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float ret = obj.meshSpawnSpread;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index meshSpawnSpread on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_meshSpawnSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve ret = obj.meshSpawnSpeed;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index meshSpawnSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_meshSpawnSpeedMultiplier(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float ret = obj.meshSpawnSpeedMultiplier;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index meshSpawnSpeedMultiplier on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_arc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float ret = obj.arc;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index arc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_arcMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.ParticleSystemShapeMultiModeValue ret = obj.arcMode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index arcMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_arcSpread(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float ret = obj.arcSpread;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index arcSpread on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_arcSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve ret = obj.arcSpeed;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index arcSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_arcSpeedMultiplier(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float ret = obj.arcSpeedMultiplier;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index arcSpeedMultiplier on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_donutRadius(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float ret = obj.donutRadius;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index donutRadius on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.Vector3 ret = obj.position;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.Vector3 ret = obj.rotation;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_scale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.Vector3 ret = obj.scale;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_texture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.Texture2D ret = obj.texture;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index texture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textureClipChannel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.ParticleSystemShapeTextureChannel ret = obj.textureClipChannel;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textureClipChannel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textureClipThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float ret = obj.textureClipThreshold;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textureClipThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textureColorAffectsParticles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			bool ret = obj.textureColorAffectsParticles;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textureColorAffectsParticles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textureAlphaAffectsParticles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			bool ret = obj.textureAlphaAffectsParticles;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textureAlphaAffectsParticles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textureBilinearFiltering(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			bool ret = obj.textureBilinearFiltering;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textureBilinearFiltering on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textureUVChannel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			int ret = obj.textureUVChannel;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textureUVChannel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enabled = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enabled on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_shapeType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.ParticleSystemShapeType arg0 = (UnityEngine.ParticleSystemShapeType)ToLua.CheckObject(L, 2, TypeTraits<UnityEngine.ParticleSystemShapeType>.type);
			obj.shapeType = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index shapeType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_randomDirectionAmount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.randomDirectionAmount = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index randomDirectionAmount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sphericalDirectionAmount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.sphericalDirectionAmount = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sphericalDirectionAmount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_randomPositionAmount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.randomPositionAmount = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index randomPositionAmount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_alignToDirection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.alignToDirection = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index alignToDirection on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_radius(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.radius = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index radius on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_radiusMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.ParticleSystemShapeMultiModeValue arg0 = (UnityEngine.ParticleSystemShapeMultiModeValue)ToLua.CheckObject(L, 2, TypeTraits<UnityEngine.ParticleSystemShapeMultiModeValue>.type);
			obj.radiusMode = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index radiusMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_radiusSpread(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.radiusSpread = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index radiusSpread on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_radiusSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve arg0 = StackTraits<UnityEngine.ParticleSystem.MinMaxCurve>.Check(L, 2);
			obj.radiusSpeed = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index radiusSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_radiusSpeedMultiplier(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.radiusSpeedMultiplier = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index radiusSpeedMultiplier on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_radiusThickness(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.radiusThickness = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index radiusThickness on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_angle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.angle = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index angle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_length(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.length = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index length on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_boxThickness(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.boxThickness = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index boxThickness on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_meshShapeType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.ParticleSystemMeshShapeType arg0 = (UnityEngine.ParticleSystemMeshShapeType)ToLua.CheckObject(L, 2, TypeTraits<UnityEngine.ParticleSystemMeshShapeType>.type);
			obj.meshShapeType = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index meshShapeType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mesh(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.Mesh arg0 = (UnityEngine.Mesh)ToLua.CheckObject<UnityEngine.Mesh>(L, 2);
			obj.mesh = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mesh on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_meshRenderer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.MeshRenderer arg0 = (UnityEngine.MeshRenderer)ToLua.CheckObject<UnityEngine.MeshRenderer>(L, 2);
			obj.meshRenderer = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index meshRenderer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_skinnedMeshRenderer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.SkinnedMeshRenderer arg0 = (UnityEngine.SkinnedMeshRenderer)ToLua.CheckObject<UnityEngine.SkinnedMeshRenderer>(L, 2);
			obj.skinnedMeshRenderer = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index skinnedMeshRenderer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sprite(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.Sprite arg0 = (UnityEngine.Sprite)ToLua.CheckObject<UnityEngine.Sprite>(L, 2);
			obj.sprite = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sprite on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_spriteRenderer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.SpriteRenderer arg0 = (UnityEngine.SpriteRenderer)ToLua.CheckObject<UnityEngine.SpriteRenderer>(L, 2);
			obj.spriteRenderer = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index spriteRenderer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useMeshMaterialIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useMeshMaterialIndex = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useMeshMaterialIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_meshMaterialIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.meshMaterialIndex = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index meshMaterialIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useMeshColors(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useMeshColors = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useMeshColors on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_normalOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.normalOffset = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index normalOffset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_meshSpawnMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.ParticleSystemShapeMultiModeValue arg0 = (UnityEngine.ParticleSystemShapeMultiModeValue)ToLua.CheckObject(L, 2, TypeTraits<UnityEngine.ParticleSystemShapeMultiModeValue>.type);
			obj.meshSpawnMode = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index meshSpawnMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_meshSpawnSpread(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.meshSpawnSpread = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index meshSpawnSpread on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_meshSpawnSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve arg0 = StackTraits<UnityEngine.ParticleSystem.MinMaxCurve>.Check(L, 2);
			obj.meshSpawnSpeed = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index meshSpawnSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_meshSpawnSpeedMultiplier(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.meshSpawnSpeedMultiplier = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index meshSpawnSpeedMultiplier on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_arc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.arc = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index arc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_arcMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.ParticleSystemShapeMultiModeValue arg0 = (UnityEngine.ParticleSystemShapeMultiModeValue)ToLua.CheckObject(L, 2, TypeTraits<UnityEngine.ParticleSystemShapeMultiModeValue>.type);
			obj.arcMode = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index arcMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_arcSpread(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.arcSpread = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index arcSpread on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_arcSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve arg0 = StackTraits<UnityEngine.ParticleSystem.MinMaxCurve>.Check(L, 2);
			obj.arcSpeed = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index arcSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_arcSpeedMultiplier(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.arcSpeedMultiplier = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index arcSpeedMultiplier on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_donutRadius(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.donutRadius = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index donutRadius on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.position = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.rotation = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_scale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.scale = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_texture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.Texture2D arg0 = (UnityEngine.Texture2D)ToLua.CheckObject<UnityEngine.Texture2D>(L, 2);
			obj.texture = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index texture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textureClipChannel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			UnityEngine.ParticleSystemShapeTextureChannel arg0 = (UnityEngine.ParticleSystemShapeTextureChannel)ToLua.CheckObject(L, 2, TypeTraits<UnityEngine.ParticleSystemShapeTextureChannel>.type);
			obj.textureClipChannel = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textureClipChannel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textureClipThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.textureClipThreshold = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textureClipThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textureColorAffectsParticles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.textureColorAffectsParticles = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textureColorAffectsParticles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textureAlphaAffectsParticles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.textureAlphaAffectsParticles = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textureAlphaAffectsParticles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textureBilinearFiltering(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.textureBilinearFiltering = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textureBilinearFiltering on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textureUVChannel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.ShapeModule obj = (UnityEngine.ParticleSystem.ShapeModule)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.textureUVChannel = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textureUVChannel on a nil value");
		}
	}
}

