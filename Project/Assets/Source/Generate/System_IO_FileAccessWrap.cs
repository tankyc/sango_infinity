//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_IO_FileAccessWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(System.IO.FileAccess));
		L.RegVar("Read", new LuaCSFunction(get_Read), null);
		L.RegVar("Write", new LuaCSFunction(get_Write), null);
		L.RegVar("ReadWrite", new LuaCSFunction(get_ReadWrite), null);
		L.RegFunction("IntToEnum", new LuaCSFunction(IntToEnum));
		L.EndEnum();
		TypeTraits<System.IO.FileAccess>.Check = CheckType;
		StackTraits<System.IO.FileAccess>.Push = Push;
	}

	static void Push(IntPtr L, System.IO.FileAccess arg)
	{
		ToLua.Push(L, arg);
	}

	static Type TypeOf_System_IO_FileAccess = typeof(System.IO.FileAccess);

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(TypeOf_System_IO_FileAccess, L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Read(IntPtr L)
	{
		ToLua.Push(L, System.IO.FileAccess.Read);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Write(IntPtr L)
	{
		ToLua.Push(L, System.IO.FileAccess.Write);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReadWrite(IntPtr L)
	{
		ToLua.Push(L, System.IO.FileAccess.ReadWrite);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
		System.IO.FileAccess o = (System.IO.FileAccess)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

