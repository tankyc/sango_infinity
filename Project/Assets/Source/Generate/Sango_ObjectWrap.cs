//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_ObjectWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Sango.Object), typeof(System.Object));
		L.RegFunction("GetObject", new LuaCSFunction(GetObject));
		L.RegFunction("SendMessage", new LuaCSFunction(SendMessage));
		L.RegFunction("ResetAll", new LuaCSFunction(ResetAll));
		L.RegFunction("ClearAll", new LuaCSFunction(ClearAll));
		L.RegFunction("Update", new LuaCSFunction(Update));
		L.RegFunction("LateUpdate", new LuaCSFunction(LateUpdate));
		L.RegFunction("GetName", new LuaCSFunction(GetName));
		L.RegFunction("GetXType", new LuaCSFunction(GetXType));
		L.RegFunction("OnUpdate", new LuaCSFunction(OnUpdate));
		L.RegFunction("OnLateUpdate", new LuaCSFunction(OnLateUpdate));
		L.RegFunction("OnRegister", new LuaCSFunction(OnRegister));
		L.RegFunction("OnUnregister", new LuaCSFunction(OnUnregister));
		L.RegFunction("OnMessage", new LuaCSFunction(OnMessage));
		L.RegFunction("DeleteObject", new LuaCSFunction(DeleteObject));
		L.RegFunction("OnDeleted", new LuaCSFunction(OnDeleted));
		L.RegFunction("IsRemoved", new LuaCSFunction(IsRemoved));
		L.RegFunction("MarkRemove", new LuaCSFunction(MarkRemove));
		L.RegFunction("OnReset", new LuaCSFunction(OnReset));
		L.RegFunction("IsRegister", new LuaCSFunction(IsRegister));
		L.RegFunction("Register", new LuaCSFunction(_Register));
		L.RegFunction("Unregister", new LuaCSFunction(Unregister));
		L.RegFunction("New", new LuaCSFunction(_CreateSango_Object));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSango_Object(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Sango.Object obj = new Sango.Object();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Sango.Object.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			Sango.IObject o = Sango.Object.GetObject(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMessage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (TypeChecker.CheckTypes<string>(L, 1) && TypeChecker.CheckParamsType<object>(L, 2, count - 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
				Sango.Object.SendMessage(arg0, arg1);
				return 0;
			}
			else if (TypeChecker.CheckTypes<Sango.IObject>(L, 1) && TypeChecker.CheckParamsType<object>(L, 2, count - 1))
			{
				Sango.IObject arg0 = (Sango.IObject)ToLua.ToObject(L, 1);
				object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
				Sango.Object.SendMessage(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Object.SendMessage");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Sango.Object.ResetAll();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Sango.Object.ClearAll();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			Sango.Object.Update(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LateUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			Sango.Object.LateUpdate(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Object obj = (Sango.Object)ToLua.CheckObject<Sango.Object>(L, 1);
			string o = obj.GetName();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetXType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Object obj = (Sango.Object)ToLua.CheckObject<Sango.Object>(L, 1);
			int o = obj.GetXType();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Object obj = (Sango.Object)ToLua.CheckObject<Sango.Object>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.OnUpdate(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnLateUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Object obj = (Sango.Object)ToLua.CheckObject<Sango.Object>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.OnLateUpdate(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnRegister(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Object obj = (Sango.Object)ToLua.CheckObject<Sango.Object>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.OnRegister(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUnregister(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Object obj = (Sango.Object)ToLua.CheckObject<Sango.Object>(L, 1);
			obj.OnUnregister();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnMessage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			Sango.Object obj = (Sango.Object)ToLua.CheckObject<Sango.Object>(L, 1);
			object[] arg0 = ToLua.ToParamsObject(L, 2, count - 1);
			obj.OnMessage(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeleteObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Object obj = (Sango.Object)ToLua.CheckObject<Sango.Object>(L, 1);
			obj.DeleteObject();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDeleted(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Object obj = (Sango.Object)ToLua.CheckObject<Sango.Object>(L, 1);
			obj.OnDeleted();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsRemoved(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Object obj = (Sango.Object)ToLua.CheckObject<Sango.Object>(L, 1);
			bool o = obj.IsRemoved();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarkRemove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Object obj = (Sango.Object)ToLua.CheckObject<Sango.Object>(L, 1);
			obj.MarkRemove();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnReset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Object obj = (Sango.Object)ToLua.CheckObject<Sango.Object>(L, 1);
			obj.OnReset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsRegister(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Object obj = (Sango.Object)ToLua.CheckObject<Sango.Object>(L, 1);
			bool o = obj.IsRegister();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _Register(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Sango.Object obj = (Sango.Object)ToLua.CheckObject<Sango.Object>(L, 1);
				bool o = obj.Register();
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2)
			{
				Sango.Object obj = (Sango.Object)ToLua.CheckObject<Sango.Object>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool o = obj.Register(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Object.Register");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unregister(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Object obj = (Sango.Object)ToLua.CheckObject<Sango.Object>(L, 1);
			obj.Unregister();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

