//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_IO_BinaryWriterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.IO.BinaryWriter), typeof(System.Object));
		L.RegFunction("Close", new LuaCSFunction(Close));
		L.RegFunction("Dispose", new LuaCSFunction(Dispose));
		L.RegFunction("Flush", new LuaCSFunction(Flush));
		L.RegFunction("Seek", new LuaCSFunction(Seek));
		L.RegFunction("DisposeAsync", new LuaCSFunction(DisposeAsync));
		L.RegFunction("Write", new LuaCSFunction(Write));
		L.RegFunction("New", new LuaCSFunction(_CreateSystem_IO_BinaryWriter));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("Null", new LuaCSFunction(get_Null), null);
		L.RegVar("BaseStream", new LuaCSFunction(get_BaseStream), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_IO_BinaryWriter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				System.IO.BinaryWriter obj = new System.IO.BinaryWriter(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				System.Text.Encoding arg1 = (System.Text.Encoding)ToLua.CheckObject<System.Text.Encoding>(L, 2);
				System.IO.BinaryWriter obj = new System.IO.BinaryWriter(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3)
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				System.Text.Encoding arg1 = (System.Text.Encoding)ToLua.CheckObject<System.Text.Encoding>(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				System.IO.BinaryWriter obj = new System.IO.BinaryWriter(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.IO.BinaryWriter.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryWriter obj = (System.IO.BinaryWriter)ToLua.CheckObject<System.IO.BinaryWriter>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryWriter obj = (System.IO.BinaryWriter)ToLua.CheckObject<System.IO.BinaryWriter>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Flush(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryWriter obj = (System.IO.BinaryWriter)ToLua.CheckObject<System.IO.BinaryWriter>(L, 1);
			obj.Flush();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Seek(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.IO.BinaryWriter obj = (System.IO.BinaryWriter)ToLua.CheckObject<System.IO.BinaryWriter>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			System.IO.SeekOrigin arg1 = (System.IO.SeekOrigin)ToLua.CheckObject(L, 3, TypeTraits<System.IO.SeekOrigin>.type);
			long o = obj.Seek(arg0, arg1);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisposeAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryWriter obj = (System.IO.BinaryWriter)ToLua.CheckObject<System.IO.BinaryWriter>(L, 1);
			System.Threading.Tasks.ValueTask o = obj.DisposeAsync();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Write(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<bool>(L, 2))
			{
				System.IO.BinaryWriter obj = (System.IO.BinaryWriter)ToLua.CheckObject<System.IO.BinaryWriter>(L, 1);
				bool arg0 = LuaDLL.lua_toboolean(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<double>(L, 2))
			{
				System.IO.BinaryWriter obj = (System.IO.BinaryWriter)ToLua.CheckObject<System.IO.BinaryWriter>(L, 1);
				double arg0 = (double)LuaDLL.lua_tonumber(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<long>(L, 2))
			{
				System.IO.BinaryWriter obj = (System.IO.BinaryWriter)ToLua.CheckObject<System.IO.BinaryWriter>(L, 1);
				long arg0 = LuaDLL.tolua_toint64(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<ulong>(L, 2))
			{
				System.IO.BinaryWriter obj = (System.IO.BinaryWriter)ToLua.CheckObject<System.IO.BinaryWriter>(L, 1);
				ulong arg0 = LuaDLL.tolua_touint64(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<byte[]>(L, 2))
			{
				System.IO.BinaryWriter obj = (System.IO.BinaryWriter)ToLua.CheckObject<System.IO.BinaryWriter>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<char[]>(L, 2))
			{
				System.IO.BinaryWriter obj = (System.IO.BinaryWriter)ToLua.CheckObject<System.IO.BinaryWriter>(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				System.IO.BinaryWriter obj = (System.IO.BinaryWriter)ToLua.CheckObject<System.IO.BinaryWriter>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<byte[], int, int>(L, 2))
			{
				System.IO.BinaryWriter obj = (System.IO.BinaryWriter)ToLua.CheckObject<System.IO.BinaryWriter>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 3);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 4);
				obj.Write(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<char[], int, int>(L, 2))
			{
				System.IO.BinaryWriter obj = (System.IO.BinaryWriter)ToLua.CheckObject<System.IO.BinaryWriter>(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 3);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 4);
				obj.Write(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.IO.BinaryWriter.Write");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Null(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.IO.BinaryWriter.Null);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BaseStream(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.BinaryWriter obj = (System.IO.BinaryWriter)o;
			System.IO.Stream ret = obj.BaseStream;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BaseStream on a nil value");
		}
	}
}

