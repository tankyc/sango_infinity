//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaInterface_LuaFileUtilsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaInterface.LuaFileUtils), typeof(System.Object));
		L.RegFunction("Dispose", new LuaCSFunction(Dispose));
		L.RegFunction("AddSearchPath", new LuaCSFunction(AddSearchPath));
		L.RegFunction("RemoveSearchPath", new LuaCSFunction(RemoveSearchPath));
		L.RegFunction("AddSearchBundle", new LuaCSFunction(AddSearchBundle));
		L.RegFunction("FindFile", new LuaCSFunction(FindFile));
		L.RegFunction("ReadFile", new LuaCSFunction(ReadFile));
		L.RegFunction("FindFileError", new LuaCSFunction(FindFileError));
		L.RegFunction("GetOSDir", new LuaCSFunction(GetOSDir));
		L.RegFunction("New", new LuaCSFunction(_CreateLuaInterface_LuaFileUtils));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("beZip", new LuaCSFunction(get_beZip), new LuaCSFunction(set_beZip));
		L.RegVar("Instance", new LuaCSFunction(get_Instance), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLuaInterface_LuaFileUtils(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LuaInterface.LuaFileUtils obj = new LuaInterface.LuaFileUtils();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LuaInterface.LuaFileUtils.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaInterface.LuaFileUtils obj = (LuaInterface.LuaFileUtils)ToLua.CheckObject<LuaInterface.LuaFileUtils>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSearchPath(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				LuaInterface.LuaFileUtils obj = (LuaInterface.LuaFileUtils)ToLua.CheckObject<LuaInterface.LuaFileUtils>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool o = obj.AddSearchPath(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				LuaInterface.LuaFileUtils obj = (LuaInterface.LuaFileUtils)ToLua.CheckObject<LuaInterface.LuaFileUtils>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				bool o = obj.AddSearchPath(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaInterface.LuaFileUtils.AddSearchPath");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveSearchPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaFileUtils obj = (LuaInterface.LuaFileUtils)ToLua.CheckObject<LuaInterface.LuaFileUtils>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.RemoveSearchPath(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSearchBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaInterface.LuaFileUtils obj = (LuaInterface.LuaFileUtils)ToLua.CheckObject<LuaInterface.LuaFileUtils>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.AssetBundle arg1 = (UnityEngine.AssetBundle)ToLua.CheckObject<UnityEngine.AssetBundle>(L, 3);
			obj.AddSearchBundle(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaFileUtils obj = (LuaInterface.LuaFileUtils)ToLua.CheckObject<LuaInterface.LuaFileUtils>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.FindFile(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaFileUtils obj = (LuaInterface.LuaFileUtils)ToLua.CheckObject<LuaInterface.LuaFileUtils>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			byte[] o = obj.ReadFile(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindFileError(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaInterface.LuaFileUtils obj = (LuaInterface.LuaFileUtils)ToLua.CheckObject<LuaInterface.LuaFileUtils>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.FindFileError(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOSDir(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = LuaInterface.LuaFileUtils.GetOSDir();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_beZip(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaFileUtils obj = (LuaInterface.LuaFileUtils)o;
			bool ret = obj.beZip;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index beZip on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, LuaInterface.LuaFileUtils.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_beZip(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaInterface.LuaFileUtils obj = (LuaInterface.LuaFileUtils)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.beZip = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index beZip on a nil value");
		}
	}
}

