//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_Tools_ModelBrushWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Sango.Tools.ModelBrush), typeof(Sango.Tools.BrushBase));
		L.RegFunction("CheckModelIndex", new LuaCSFunction(CheckModelIndex));
		L.RegFunction("ExportConfigTo", new LuaCSFunction(ExportConfigTo));
		L.RegFunction("SaveConfig", new LuaCSFunction(SaveConfig));
		L.RegFunction("OnBrushTypeChange", new LuaCSFunction(OnBrushTypeChange));
		L.RegFunction("OnObjectTypeChange", new LuaCSFunction(OnObjectTypeChange));
		L.RegFunction("OnSeasonChanged", new LuaCSFunction(OnSeasonChanged));
		L.RegFunction("Clear", new LuaCSFunction(Clear));
		L.RegFunction("Modify", new LuaCSFunction(Modify));
		L.RegFunction("OnGUI", new LuaCSFunction(OnGUI));
		L.RegFunction("AddModelConfig", new LuaCSFunction(AddModelConfig));
		L.RegFunction("ModifyModelConfig", new LuaCSFunction(ModifyModelConfig));
		L.RegFunction("SelectModel", new LuaCSFunction(SelectModel));
		L.RegFunction("OnEnter", new LuaCSFunction(OnEnter));
		L.RegFunction("DrawGizmos", new LuaCSFunction(DrawGizmos));
		L.RegFunction("ClearModel", new LuaCSFunction(ClearModel));
		L.RegFunction("Update", new LuaCSFunction(Update));
		L.RegFunction("New", new LuaCSFunction(_CreateSango_Tools_ModelBrush));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("randomDir", new LuaCSFunction(get_randomDir), new LuaCSFunction(set_randomDir));
		L.RegVar("model", new LuaCSFunction(get_model), new LuaCSFunction(set_model));
		L.RegVar("modelConfig", new LuaCSFunction(get_modelConfig), new LuaCSFunction(set_modelConfig));
		L.RegVar("anchorByGrid", new LuaCSFunction(get_anchorByGrid), new LuaCSFunction(set_anchorByGrid));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSango_Tools_ModelBrush(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Sango.Tools.MapEditor arg0 = (Sango.Tools.MapEditor)ToLua.CheckObject<Sango.Tools.MapEditor>(L, 1);
				Sango.Tools.ModelBrush obj = new Sango.Tools.ModelBrush(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Sango.Tools.ModelBrush.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckModelIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)ToLua.CheckObject<Sango.Tools.ModelBrush>(L, 1);
			int o = obj.CheckModelIndex();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExportConfigTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)ToLua.CheckObject<Sango.Tools.ModelBrush>(L, 1);
			obj.ExportConfigTo();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveConfig(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)ToLua.CheckObject<Sango.Tools.ModelBrush>(L, 1);
				obj.SaveConfig();
				return 0;
			}
			else if (count == 2)
			{
				Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)ToLua.CheckObject<Sango.Tools.ModelBrush>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.SaveConfig(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Tools.ModelBrush.SaveConfig");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnBrushTypeChange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)ToLua.CheckObject<Sango.Tools.ModelBrush>(L, 1);
			obj.OnBrushTypeChange();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnObjectTypeChange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)ToLua.CheckObject<Sango.Tools.ModelBrush>(L, 1);
			obj.OnObjectTypeChange();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSeasonChanged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)ToLua.CheckObject<Sango.Tools.ModelBrush>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.OnSeasonChanged(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)ToLua.CheckObject<Sango.Tools.ModelBrush>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Modify(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)ToLua.CheckObject<Sango.Tools.ModelBrush>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			Sango.Tools.MapEditor arg1 = (Sango.Tools.MapEditor)ToLua.CheckObject<Sango.Tools.MapEditor>(L, 3);
			obj.Modify(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnGUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)ToLua.CheckObject<Sango.Tools.ModelBrush>(L, 1);
			obj.OnGUI();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddModelConfig(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)ToLua.CheckObject<Sango.Tools.ModelBrush>(L, 1);
			obj.AddModelConfig();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ModifyModelConfig(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)ToLua.CheckObject<Sango.Tools.ModelBrush>(L, 1);
			Sango.Game.ModelConfig arg0 = (Sango.Game.ModelConfig)ToLua.CheckObject<Sango.Game.ModelConfig>(L, 2);
			obj.ModifyModelConfig(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SelectModel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)ToLua.CheckObject<Sango.Tools.ModelBrush>(L, 1);
			Sango.Game.ModelConfig arg0 = (Sango.Game.ModelConfig)ToLua.CheckObject<Sango.Game.ModelConfig>(L, 2);
			obj.SelectModel(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnEnter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)ToLua.CheckObject<Sango.Tools.ModelBrush>(L, 1);
			obj.OnEnter();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawGizmos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)ToLua.CheckObject<Sango.Tools.ModelBrush>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.DrawGizmos(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearModel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)ToLua.CheckObject<Sango.Tools.ModelBrush>(L, 1);
			obj.ClearModel();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)ToLua.CheckObject<Sango.Tools.ModelBrush>(L, 1);
			obj.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_randomDir(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)o;
			bool ret = obj.randomDir;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index randomDir on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_model(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)o;
			UnityEngine.GameObject ret = obj.model;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index model on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_modelConfig(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)o;
			Sango.Game.ModelConfig ret = obj.modelConfig;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index modelConfig on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_anchorByGrid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)o;
			bool ret = obj.anchorByGrid;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index anchorByGrid on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_randomDir(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.randomDir = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index randomDir on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_model(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject<UnityEngine.GameObject>(L, 2);
			obj.model = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index model on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_modelConfig(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)o;
			Sango.Game.ModelConfig arg0 = (Sango.Game.ModelConfig)ToLua.CheckObject<Sango.Game.ModelConfig>(L, 2);
			obj.modelConfig = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index modelConfig on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_anchorByGrid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.ModelBrush obj = (Sango.Tools.ModelBrush)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.anchorByGrid = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index anchorByGrid on a nil value");
		}
	}
}

