//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_Game_TroopWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Sango.Game.Troop), typeof(Sango.Game.SangoObject));
		L.RegFunction("Init", new LuaCSFunction(Init));
		L.RegFunction("Run", new LuaCSFunction(Run));
		L.RegFunction("OnScenarioPrepare", new LuaCSFunction(OnScenarioPrepare));
		L.RegFunction("OnTurnStart", new LuaCSFunction(OnTurnStart));
		L.RegFunction("CalculateAttribute", new LuaCSFunction(CalculateAttribute));
		L.RegFunction("MoveCost", new LuaCSFunction(MoveCost));
		L.RegFunction("IsAlliance", new LuaCSFunction(IsAlliance));
		L.RegFunction("IsEnemy", new LuaCSFunction(IsEnemy));
		L.RegFunction("IsSameForce", new LuaCSFunction(IsSameForce));
		L.RegFunction("GetAttackBackFactor", new LuaCSFunction(GetAttackBackFactor));
		L.RegFunction("AttackBuilding", new LuaCSFunction(AttackBuilding));
		L.RegFunction("CalculateSkillDamage", new LuaCSFunction(CalculateSkillDamage));
		L.RegFunction("CalculateSkillCriticalBoost", new LuaCSFunction(CalculateSkillCriticalBoost));
		L.RegFunction("CalculateRestrainBoost", new LuaCSFunction(CalculateRestrainBoost));
		L.RegFunction("CalculateTroopsLevelBoost", new LuaCSFunction(CalculateTroopsLevelBoost));
		L.RegFunction("MoveTo", new LuaCSFunction(MoveTo));
		L.RegFunction("TryMoveToSpell", new LuaCSFunction(TryMoveToSpell));
		L.RegFunction("ChangeFood", new LuaCSFunction(ChangeFood));
		L.RegFunction("ChangeTroops", new LuaCSFunction(ChangeTroops));
		L.RegFunction("GetTroopsNum", new LuaCSFunction(GetTroopsNum));
		L.RegFunction("SpellSkill", new LuaCSFunction(SpellSkill));
		L.RegFunction("TryMoveTo", new LuaCSFunction(TryMoveTo));
		L.RegFunction("TryCloseTo", new LuaCSFunction(TryCloseTo));
		L.RegFunction("TryMoveToCity", new LuaCSFunction(TryMoveToCity));
		L.RegFunction("UpdateCell", new LuaCSFunction(UpdateCell));
		L.RegFunction("EnterCity", new LuaCSFunction(EnterCity));
		L.RegFunction("Clear", new LuaCSFunction(Clear));
		L.RegFunction("JoinToForce", new LuaCSFunction(JoinToForce));
		L.RegFunction("SetMission", new LuaCSFunction(SetMission));
		L.RegFunction("NeedPrepareMission", new LuaCSFunction(NeedPrepareMission));
		L.RegFunction("DoAI", new LuaCSFunction(DoAI));
		L.RegFunction("AIPrepare", new LuaCSFunction(AIPrepare));
		L.RegFunction("ChangeCity", new LuaCSFunction(ChangeCity));
		L.RegFunction("New", new LuaCSFunction(_CreateSango_Game_Troop));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("BelongForce", new LuaCSFunction(get_BelongForce), new LuaCSFunction(set_BelongForce));
		L.RegVar("BelongCorps", new LuaCSFunction(get_BelongCorps), new LuaCSFunction(set_BelongCorps));
		L.RegVar("BelongCity", new LuaCSFunction(get_BelongCity), new LuaCSFunction(set_BelongCity));
		L.RegVar("Leader", new LuaCSFunction(get_Leader), new LuaCSFunction(set_Leader));
		L.RegVar("MemberList", new LuaCSFunction(get_MemberList), new LuaCSFunction(set_MemberList));
		L.RegVar("TroopType", new LuaCSFunction(get_TroopType), new LuaCSFunction(set_TroopType));
		L.RegVar("CaptiveList", new LuaCSFunction(get_CaptiveList), new LuaCSFunction(set_CaptiveList));
		L.RegVar("x", new LuaCSFunction(get_x), new LuaCSFunction(set_x));
		L.RegVar("y", new LuaCSFunction(get_y), new LuaCSFunction(set_y));
		L.RegVar("troops", new LuaCSFunction(get_troops), new LuaCSFunction(set_troops));
		L.RegVar("woundedTroops", new LuaCSFunction(get_woundedTroops), new LuaCSFunction(set_woundedTroops));
		L.RegVar("energy", new LuaCSFunction(get_energy), new LuaCSFunction(set_energy));
		L.RegVar("morale", new LuaCSFunction(get_morale), new LuaCSFunction(set_morale));
		L.RegVar("food", new LuaCSFunction(get_food), new LuaCSFunction(set_food));
		L.RegVar("gold", new LuaCSFunction(get_gold), new LuaCSFunction(set_gold));
		L.RegVar("population", new LuaCSFunction(get_population), new LuaCSFunction(set_population));
		L.RegVar("itemStore", new LuaCSFunction(get_itemStore), new LuaCSFunction(set_itemStore));
		L.RegVar("missionType", new LuaCSFunction(get_missionType), new LuaCSFunction(set_missionType));
		L.RegVar("missionTarget", new LuaCSFunction(get_missionTarget), new LuaCSFunction(set_missionTarget));
		L.RegVar("skills", new LuaCSFunction(get_skills), new LuaCSFunction(set_skills));
		L.RegVar("actionPower", new LuaCSFunction(get_actionPower), new LuaCSFunction(set_actionPower));
		L.RegVar("cell", new LuaCSFunction(get_cell), new LuaCSFunction(set_cell));
		L.RegVar("MoveRange", new LuaCSFunction(get_MoveRange), new LuaCSFunction(set_MoveRange));
		L.RegVar("ObjectType", new LuaCSFunction(get_ObjectType), null);
		L.RegVar("AIFinished", new LuaCSFunction(get_AIFinished), new LuaCSFunction(set_AIFinished));
		L.RegVar("AIPrepared", new LuaCSFunction(get_AIPrepared), new LuaCSFunction(set_AIPrepared));
		L.RegVar("Name", new LuaCSFunction(get_Name), null);
		L.RegVar("MaxTroops", new LuaCSFunction(get_MaxTroops), null);
		L.RegVar("IsFull", new LuaCSFunction(get_IsFull), null);
		L.RegVar("MoveAbility", new LuaCSFunction(get_MoveAbility), null);
		L.RegVar("isOver", new LuaCSFunction(get_isOver), new LuaCSFunction(set_isOver));
		L.RegVar("SpearLv", new LuaCSFunction(get_SpearLv), null);
		L.RegVar("HalberdLv", new LuaCSFunction(get_HalberdLv), null);
		L.RegVar("CrossbowLv", new LuaCSFunction(get_CrossbowLv), null);
		L.RegVar("HorseLv", new LuaCSFunction(get_HorseLv), null);
		L.RegVar("WaterLv", new LuaCSFunction(get_WaterLv), null);
		L.RegVar("MachineLv", new LuaCSFunction(get_MachineLv), null);
		L.RegVar("Command", new LuaCSFunction(get_Command), null);
		L.RegVar("Strength", new LuaCSFunction(get_Strength), null);
		L.RegVar("Intelligence", new LuaCSFunction(get_Intelligence), null);
		L.RegVar("Politics", new LuaCSFunction(get_Politics), null);
		L.RegVar("Glamour", new LuaCSFunction(get_Glamour), null);
		L.RegVar("Render", new LuaCSFunction(get_Render), null);
		L.RegVar("TroopMissionBehaviour", new LuaCSFunction(get_TroopMissionBehaviour), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSango_Game_Troop(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Sango.Game.Troop obj = new Sango.Game.Troop();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Sango.Game.Troop.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.Scenario arg0 = (Sango.Game.Scenario)ToLua.CheckObject<Sango.Game.Scenario>(L, 2);
			obj.Init(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Run(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
				Sango.Game.Scenario arg0 = (Sango.Game.Scenario)ToLua.CheckObject<Sango.Game.Scenario>(L, 2);
				bool o = obj.Run(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
				Sango.Game.Corps arg0 = (Sango.Game.Corps)ToLua.CheckObject<Sango.Game.Corps>(L, 2);
				Sango.Game.Force arg1 = (Sango.Game.Force)ToLua.CheckObject<Sango.Game.Force>(L, 3);
				Sango.Game.Scenario arg2 = (Sango.Game.Scenario)ToLua.CheckObject<Sango.Game.Scenario>(L, 4);
				bool o = obj.Run(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Game.Troop.Run");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnScenarioPrepare(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.Scenario arg0 = (Sango.Game.Scenario)ToLua.CheckObject<Sango.Game.Scenario>(L, 2);
			obj.OnScenarioPrepare(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnTurnStart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.Scenario arg0 = (Sango.Game.Scenario)ToLua.CheckObject<Sango.Game.Scenario>(L, 2);
			bool o = obj.OnTurnStart(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateAttribute(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			obj.CalculateAttribute();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveCost(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.Cell arg0 = (Sango.Game.Cell)ToLua.CheckObject<Sango.Game.Cell>(L, 2);
			int o = obj.MoveCost(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsAlliance(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<Sango.Game.BuildingBase>(L, 2))
			{
				Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
				Sango.Game.BuildingBase arg0 = (Sango.Game.BuildingBase)ToLua.ToObject(L, 2);
				bool o = obj.IsAlliance(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Sango.Game.Troop>(L, 2))
			{
				Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
				Sango.Game.Troop arg0 = (Sango.Game.Troop)ToLua.ToObject(L, 2);
				bool o = obj.IsAlliance(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
				Sango.Game.Force arg0 = (Sango.Game.Force)ToLua.CheckObject<Sango.Game.Force>(L, 2);
				Sango.Game.Force arg1 = (Sango.Game.Force)ToLua.CheckObject<Sango.Game.Force>(L, 3);
				bool o = obj.IsAlliance(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Game.Troop.IsAlliance");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsEnemy(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<Sango.Game.BuildingBase>(L, 2))
			{
				Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
				Sango.Game.BuildingBase arg0 = (Sango.Game.BuildingBase)ToLua.ToObject(L, 2);
				bool o = obj.IsEnemy(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Sango.Game.Troop>(L, 2))
			{
				Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
				Sango.Game.Troop arg0 = (Sango.Game.Troop)ToLua.ToObject(L, 2);
				bool o = obj.IsEnemy(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
				Sango.Game.Force arg0 = (Sango.Game.Force)ToLua.CheckObject<Sango.Game.Force>(L, 2);
				Sango.Game.Force arg1 = (Sango.Game.Force)ToLua.CheckObject<Sango.Game.Force>(L, 3);
				bool o = obj.IsEnemy(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Game.Troop.IsEnemy");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSameForce(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<Sango.Game.BuildingBase>(L, 2))
			{
				Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
				Sango.Game.BuildingBase arg0 = (Sango.Game.BuildingBase)ToLua.ToObject(L, 2);
				bool o = obj.IsSameForce(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Sango.Game.Troop>(L, 2))
			{
				Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
				Sango.Game.Troop arg0 = (Sango.Game.Troop)ToLua.ToObject(L, 2);
				bool o = obj.IsSameForce(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
				Sango.Game.Force arg0 = (Sango.Game.Force)ToLua.CheckObject<Sango.Game.Force>(L, 2);
				Sango.Game.Force arg1 = (Sango.Game.Force)ToLua.CheckObject<Sango.Game.Force>(L, 3);
				bool o = obj.IsSameForce(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Game.Troop.IsSameForce");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAttackBackFactor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.Skill arg0 = (Sango.Game.Skill)ToLua.CheckObject<Sango.Game.Skill>(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			float o = obj.GetAttackBackFactor(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AttackBuilding(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<Sango.Game.Cell>(L, 2))
			{
				Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
				Sango.Game.Cell arg0 = (Sango.Game.Cell)ToLua.ToObject(L, 2);
				obj.AttackBuilding(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Sango.Game.BuildingBase>(L, 2))
			{
				Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
				Sango.Game.BuildingBase arg0 = (Sango.Game.BuildingBase)ToLua.ToObject(L, 2);
				obj.AttackBuilding(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Game.Troop.AttackBuilding");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateSkillDamage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<Sango.Game.Troop, Sango.Game.Troop, Sango.Game.Skill>(L, 1))
			{
				Sango.Game.Troop arg0 = (Sango.Game.Troop)ToLua.ToObject(L, 1);
				Sango.Game.Troop arg1 = (Sango.Game.Troop)ToLua.ToObject(L, 2);
				Sango.Game.Skill arg2 = (Sango.Game.Skill)ToLua.ToObject(L, 3);
				int o = Sango.Game.Troop.CalculateSkillDamage(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<Sango.Game.Troop, Sango.Game.BuildingBase, Sango.Game.Skill>(L, 1))
			{
				Sango.Game.Troop arg0 = (Sango.Game.Troop)ToLua.ToObject(L, 1);
				Sango.Game.BuildingBase arg1 = (Sango.Game.BuildingBase)ToLua.ToObject(L, 2);
				Sango.Game.Skill arg2 = (Sango.Game.Skill)ToLua.ToObject(L, 3);
				int o = Sango.Game.Troop.CalculateSkillDamage(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<Sango.Game.BuildingBase, Sango.Game.Troop, Sango.Game.Skill>(L, 1))
			{
				Sango.Game.BuildingBase arg0 = (Sango.Game.BuildingBase)ToLua.ToObject(L, 1);
				Sango.Game.Troop arg1 = (Sango.Game.Troop)ToLua.ToObject(L, 2);
				Sango.Game.Skill arg2 = (Sango.Game.Skill)ToLua.ToObject(L, 3);
				int o = Sango.Game.Troop.CalculateSkillDamage(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Game.Troop.CalculateSkillDamage");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateSkillCriticalBoost(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<Sango.Game.Troop, Sango.Game.Skill, LuaInterface.LuaOut<float>>(L, 2))
			{
				Sango.Game.Troop arg0 = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
				Sango.Game.Troop arg1 = (Sango.Game.Troop)ToLua.ToObject(L, 2);
				Sango.Game.Skill arg2 = (Sango.Game.Skill)ToLua.ToObject(L, 3);
				float arg3;
				bool o = Sango.Game.Troop.CalculateSkillCriticalBoost(arg0, arg1, arg2, out arg3);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushnumber(L, arg3);
				return 2;
			}
			else if (count == 4 && TypeChecker.CheckTypes<Sango.Game.BuildingBase, Sango.Game.Skill, LuaInterface.LuaOut<float>>(L, 2))
			{
				Sango.Game.Troop arg0 = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
				Sango.Game.BuildingBase arg1 = (Sango.Game.BuildingBase)ToLua.ToObject(L, 2);
				Sango.Game.Skill arg2 = (Sango.Game.Skill)ToLua.ToObject(L, 3);
				float arg3;
				bool o = Sango.Game.Troop.CalculateSkillCriticalBoost(arg0, arg1, arg2, out arg3);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushnumber(L, arg3);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Game.Troop.CalculateSkillCriticalBoost");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateRestrainBoost(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Game.TroopType arg0 = (Sango.Game.TroopType)ToLua.CheckObject<Sango.Game.TroopType>(L, 1);
			Sango.Game.TroopType arg1 = (Sango.Game.TroopType)ToLua.CheckObject<Sango.Game.TroopType>(L, 2);
			float o = Sango.Game.Troop.CalculateRestrainBoost(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateTroopsLevelBoost(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Game.Troop arg0 = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.TroopType arg1 = (Sango.Game.TroopType)ToLua.CheckObject<Sango.Game.TroopType>(L, 2);
			float o = Sango.Game.Troop.CalculateTroopsLevelBoost(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.Cell arg0 = (Sango.Game.Cell)ToLua.CheckObject<Sango.Game.Cell>(L, 2);
			bool o = obj.MoveTo(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryMoveToSpell(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.Cell arg0 = (Sango.Game.Cell)ToLua.CheckObject<Sango.Game.Cell>(L, 2);
			Sango.Game.Skill arg1 = (Sango.Game.Skill)ToLua.CheckObject<Sango.Game.Skill>(L, 3);
			bool o = obj.TryMoveToSpell(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeFood(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			bool o = obj.ChangeFood(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeTroops(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			Sango.Game.SangoObject arg1 = (Sango.Game.SangoObject)ToLua.CheckObject<Sango.Game.SangoObject>(L, 3);
			bool o = obj.ChangeTroops(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTroopsNum(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			int o = obj.GetTroopsNum();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SpellSkill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.Skill arg0 = (Sango.Game.Skill)ToLua.CheckObject<Sango.Game.Skill>(L, 2);
			Sango.Game.Cell arg1 = (Sango.Game.Cell)ToLua.CheckObject<Sango.Game.Cell>(L, 3);
			bool o = obj.SpellSkill(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryMoveTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.Cell arg0 = (Sango.Game.Cell)ToLua.CheckObject<Sango.Game.Cell>(L, 2);
			bool o = obj.TryMoveTo(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryCloseTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.Cell arg0 = (Sango.Game.Cell)ToLua.CheckObject<Sango.Game.Cell>(L, 2);
			bool o = obj.TryCloseTo(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryMoveToCity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.City arg0 = (Sango.Game.City)ToLua.CheckObject<Sango.Game.City>(L, 2);
			bool o = obj.TryMoveToCity(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateCell(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.Cell arg0 = (Sango.Game.Cell)ToLua.CheckObject<Sango.Game.Cell>(L, 2);
			Sango.Game.Cell arg1 = (Sango.Game.Cell)ToLua.CheckObject<Sango.Game.Cell>(L, 3);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			obj.UpdateCell(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnterCity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.City arg0 = (Sango.Game.City)ToLua.CheckObject<Sango.Game.City>(L, 2);
			obj.EnterCity(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int JoinToForce(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.City arg0 = (Sango.Game.City)ToLua.CheckObject<Sango.Game.City>(L, 2);
			bool o = obj.JoinToForce(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMission(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.MissionType arg0 = (Sango.Game.MissionType)ToLua.CheckObject(L, 2, TypeTraits<Sango.Game.MissionType>.type);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			obj.SetMission(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NeedPrepareMission(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			obj.NeedPrepareMission();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoAI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.Scenario arg0 = (Sango.Game.Scenario)ToLua.CheckObject<Sango.Game.Scenario>(L, 2);
			bool o = obj.DoAI(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AIPrepare(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.Scenario arg0 = (Sango.Game.Scenario)ToLua.CheckObject<Sango.Game.Scenario>(L, 2);
			obj.AIPrepare(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeCity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Game.Troop obj = (Sango.Game.Troop)ToLua.CheckObject<Sango.Game.Troop>(L, 1);
			Sango.Game.City arg0 = (Sango.Game.City)ToLua.CheckObject<Sango.Game.City>(L, 2);
			Sango.Game.City o = obj.ChangeCity(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BelongForce(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.Force ret = obj.BelongForce;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BelongForce on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BelongCorps(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.Corps ret = obj.BelongCorps;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BelongCorps on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BelongCity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.City ret = obj.BelongCity;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BelongCity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Leader(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.Person ret = obj.Leader;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Leader on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MemberList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.SangoObjectList<Sango.Game.Person> ret = obj.MemberList;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MemberList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TroopType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.TroopType ret = obj.TroopType;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TroopType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CaptiveList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.SangoObjectList<Sango.Game.Person> ret = obj.CaptiveList;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CaptiveList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_x(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.x;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index x on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_y(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.y;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index y on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_troops(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.troops;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index troops on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_woundedTroops(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.woundedTroops;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index woundedTroops on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_energy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.energy;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index energy on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_morale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.morale;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index morale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_food(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.food;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index food on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.gold;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_population(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.population;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index population on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_itemStore(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.ItemStore ret = obj.itemStore;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index itemStore on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_missionType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.missionType;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index missionType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_missionTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.missionTarget;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index missionTarget on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_skills(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			System.Collections.Generic.List<Sango.Game.Skill> ret = obj.skills;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index skills on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_actionPower(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			byte ret = obj.actionPower;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index actionPower on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cell(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.Cell ret = obj.cell;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cell on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MoveRange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			System.Collections.Generic.List<Sango.Game.Cell> ret = obj.MoveRange;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MoveRange on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ObjectType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.SangoObjectType ret = obj.ObjectType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ObjectType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AIFinished(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			bool ret = obj.AIFinished;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AIFinished on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AIPrepared(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			bool ret = obj.AIPrepared;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AIPrepared on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			string ret = obj.Name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxTroops(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.MaxTroops;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxTroops on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsFull(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			bool ret = obj.IsFull;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsFull on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MoveAbility(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.MoveAbility;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MoveAbility on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isOver(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			bool ret = obj.isOver;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isOver on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SpearLv(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.SpearLv;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SpearLv on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HalberdLv(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.HalberdLv;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HalberdLv on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CrossbowLv(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.CrossbowLv;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CrossbowLv on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HorseLv(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.HorseLv;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HorseLv on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WaterLv(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.WaterLv;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index WaterLv on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MachineLv(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.MachineLv;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MachineLv on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Command(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.Command;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Command on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Strength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.Strength;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Strength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Intelligence(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.Intelligence;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Intelligence on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Politics(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.Politics;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Politics on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Glamour(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int ret = obj.Glamour;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Glamour on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Render(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.Render.TroopRender ret = obj.Render;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Render on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TroopMissionBehaviour(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.TroopMissionBehaviour ret = obj.TroopMissionBehaviour;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TroopMissionBehaviour on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BelongForce(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.Force arg0 = (Sango.Game.Force)ToLua.CheckObject<Sango.Game.Force>(L, 2);
			obj.BelongForce = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BelongForce on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BelongCorps(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.Corps arg0 = (Sango.Game.Corps)ToLua.CheckObject<Sango.Game.Corps>(L, 2);
			obj.BelongCorps = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BelongCorps on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BelongCity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.City arg0 = (Sango.Game.City)ToLua.CheckObject<Sango.Game.City>(L, 2);
			obj.BelongCity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BelongCity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Leader(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.Person arg0 = (Sango.Game.Person)ToLua.CheckObject<Sango.Game.Person>(L, 2);
			obj.Leader = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Leader on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MemberList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.SangoObjectList<Sango.Game.Person> arg0 = (Sango.Game.SangoObjectList<Sango.Game.Person>)ToLua.CheckObject<Sango.Game.SangoObjectList<Sango.Game.Person>>(L, 2);
			obj.MemberList = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MemberList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TroopType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.TroopType arg0 = (Sango.Game.TroopType)ToLua.CheckObject<Sango.Game.TroopType>(L, 2);
			obj.TroopType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TroopType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CaptiveList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.SangoObjectList<Sango.Game.Person> arg0 = (Sango.Game.SangoObjectList<Sango.Game.Person>)ToLua.CheckObject<Sango.Game.SangoObjectList<Sango.Game.Person>>(L, 2);
			obj.CaptiveList = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CaptiveList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_x(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.x = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index x on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_y(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.y = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index y on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_troops(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.troops = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index troops on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_woundedTroops(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.woundedTroops = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index woundedTroops on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_energy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.energy = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index energy on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_morale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.morale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index morale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_food(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.food = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index food on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_gold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.gold = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_population(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.population = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index population on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_itemStore(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.ItemStore arg0 = (Sango.Game.ItemStore)ToLua.CheckObject<Sango.Game.ItemStore>(L, 2);
			obj.itemStore = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index itemStore on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_missionType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.missionType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index missionType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_missionTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.missionTarget = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index missionTarget on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_skills(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			System.Collections.Generic.List<Sango.Game.Skill> arg0 = (System.Collections.Generic.List<Sango.Game.Skill>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.List<Sango.Game.Skill>>.type);
			obj.skills = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index skills on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_actionPower(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			byte arg0 = (byte)LuaDLL.luaL_checkinteger(L, 2);
			obj.actionPower = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index actionPower on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cell(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			Sango.Game.Cell arg0 = (Sango.Game.Cell)ToLua.CheckObject<Sango.Game.Cell>(L, 2);
			obj.cell = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cell on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MoveRange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			System.Collections.Generic.List<Sango.Game.Cell> arg0 = (System.Collections.Generic.List<Sango.Game.Cell>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.List<Sango.Game.Cell>>.type);
			obj.MoveRange = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MoveRange on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AIFinished(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.AIFinished = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AIFinished on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AIPrepared(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.AIPrepared = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AIPrepared on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isOver(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Game.Troop obj = (Sango.Game.Troop)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isOver = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isOver on a nil value");
		}
	}
}

