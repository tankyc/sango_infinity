//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_IO_BinaryReaderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.IO.BinaryReader), typeof(System.Object));
		L.RegFunction("Close", new LuaCSFunction(Close));
		L.RegFunction("Dispose", new LuaCSFunction(Dispose));
		L.RegFunction("PeekChar", new LuaCSFunction(PeekChar));
		L.RegFunction("Read", new LuaCSFunction(Read));
		L.RegFunction("ReadBoolean", new LuaCSFunction(ReadBoolean));
		L.RegFunction("ReadByte", new LuaCSFunction(ReadByte));
		L.RegFunction("ReadSByte", new LuaCSFunction(ReadSByte));
		L.RegFunction("ReadChar", new LuaCSFunction(ReadChar));
		L.RegFunction("ReadInt16", new LuaCSFunction(ReadInt16));
		L.RegFunction("ReadUInt16", new LuaCSFunction(ReadUInt16));
		L.RegFunction("ReadInt32", new LuaCSFunction(ReadInt32));
		L.RegFunction("ReadUInt32", new LuaCSFunction(ReadUInt32));
		L.RegFunction("ReadInt64", new LuaCSFunction(ReadInt64));
		L.RegFunction("ReadUInt64", new LuaCSFunction(ReadUInt64));
		L.RegFunction("ReadSingle", new LuaCSFunction(ReadSingle));
		L.RegFunction("ReadDouble", new LuaCSFunction(ReadDouble));
		L.RegFunction("ReadDecimal", new LuaCSFunction(ReadDecimal));
		L.RegFunction("ReadString", new LuaCSFunction(ReadString));
		L.RegFunction("ReadChars", new LuaCSFunction(ReadChars));
		L.RegFunction("ReadBytes", new LuaCSFunction(ReadBytes));
		L.RegFunction("New", new LuaCSFunction(_CreateSystem_IO_BinaryReader));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("BaseStream", new LuaCSFunction(get_BaseStream), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_IO_BinaryReader(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				System.IO.BinaryReader obj = new System.IO.BinaryReader(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				System.Text.Encoding arg1 = (System.Text.Encoding)ToLua.CheckObject<System.Text.Encoding>(L, 2);
				System.IO.BinaryReader obj = new System.IO.BinaryReader(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3)
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				System.Text.Encoding arg1 = (System.Text.Encoding)ToLua.CheckObject<System.Text.Encoding>(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				System.IO.BinaryReader obj = new System.IO.BinaryReader(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.IO.BinaryReader.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PeekChar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			int o = obj.PeekChar();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Read(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
				int o = obj.Read();
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<char[], int, int>(L, 2))
			{
				System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 3);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 4);
				int o = obj.Read(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<byte[], int, int>(L, 2))
			{
				System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 3);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 4);
				int o = obj.Read(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.IO.BinaryReader.Read");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			bool o = obj.ReadBoolean();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			byte o = obj.ReadByte();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadSByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			sbyte o = obj.ReadSByte();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadChar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			char o = obj.ReadChar();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt16(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			short o = obj.ReadInt16();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUInt16(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			ushort o = obj.ReadUInt16();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			int o = obj.ReadInt32();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			uint o = obj.ReadUInt32();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			long o = obj.ReadInt64();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			ulong o = obj.ReadUInt64();
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadSingle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			float o = obj.ReadSingle();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			double o = obj.ReadDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadDecimal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			decimal o = obj.ReadDecimal();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			string o = obj.ReadString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadChars(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			char[] o = obj.ReadChars(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			byte[] o = obj.ReadBytes(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BaseStream(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.BinaryReader obj = (System.IO.BinaryReader)o;
			System.IO.Stream ret = obj.BaseStream;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BaseStream on a nil value");
		}
	}
}

