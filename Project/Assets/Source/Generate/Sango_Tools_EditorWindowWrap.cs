//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_Tools_EditorWindowWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Sango.Tools.EditorWindow), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Awake", new LuaCSFunction(Awake));
		L.RegFunction("OnDestroy", new LuaCSFunction(OnDestroy));
		L.RegFunction("OnGUI", new LuaCSFunction(OnGUI));
		L.RegFunction("IsPointOverUI", new LuaCSFunction(IsPointOverUI));
		L.RegFunction("AddWindow", new LuaCSFunction(AddWindow));
		L.RegFunction("RemoveWindow", new LuaCSFunction(RemoveWindow));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("visible", new LuaCSFunction(get_visible), new LuaCSFunction(set_visible));
		L.RegVar("windowRect", new LuaCSFunction(get_windowRect), new LuaCSFunction(set_windowRect));
		L.RegVar("windowFunc", new LuaCSFunction(get_windowFunc), new LuaCSFunction(set_windowFunc));
		L.RegVar("windowMinFunc", new LuaCSFunction(get_windowMinFunc), new LuaCSFunction(set_windowMinFunc));
		L.RegVar("windowName", new LuaCSFunction(get_windowName), new LuaCSFunction(set_windowName));
		L.RegVar("windowId", new LuaCSFunction(get_windowId), new LuaCSFunction(set_windowId));
		L.RegVar("canClose", new LuaCSFunction(get_canClose), new LuaCSFunction(set_canClose));
		L.RegVar("dragable", new LuaCSFunction(get_dragable), new LuaCSFunction(set_dragable));
		L.RegVar("minmaxable", new LuaCSFunction(get_minmaxable), new LuaCSFunction(set_minmaxable));
		L.RegVar("skin", new LuaCSFunction(get_skin), new LuaCSFunction(set_skin));
		L.RegFunction("WindowFunction", new LuaCSFunction(Sango_Tools_EditorWindow_WindowFunction));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Awake(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)ToLua.CheckObject<Sango.Tools.EditorWindow>(L, 1);
			obj.Awake();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)ToLua.CheckObject<Sango.Tools.EditorWindow>(L, 1);
			obj.OnDestroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnGUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)ToLua.CheckObject<Sango.Tools.EditorWindow>(L, 1);
			obj.OnGUI();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsPointOverUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = Sango.Tools.EditorWindow.IsPointOverUI();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
				UnityEngine.Rect arg1 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				Sango.Tools.EditorWindow.WindowFunction arg2 = (Sango.Tools.EditorWindow.WindowFunction)ToLua.CheckDelegate<Sango.Tools.EditorWindow.WindowFunction>(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				Sango.Tools.EditorWindow o = Sango.Tools.EditorWindow.AddWindow(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
				UnityEngine.Rect arg1 = StackTraits<UnityEngine.Rect>.Check(L, 2);
				Sango.Tools.EditorWindow.WindowFunction arg2 = (Sango.Tools.EditorWindow.WindowFunction)ToLua.CheckDelegate<Sango.Tools.EditorWindow.WindowFunction>(L, 3);
				Sango.Tools.EditorWindow.WindowFunction arg3 = (Sango.Tools.EditorWindow.WindowFunction)ToLua.CheckDelegate<Sango.Tools.EditorWindow.WindowFunction>(L, 4);
				string arg4 = ToLua.CheckString(L, 5);
				Sango.Tools.EditorWindow o = Sango.Tools.EditorWindow.AddWindow(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Tools.EditorWindow.AddWindow");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.EditorWindow arg0 = (Sango.Tools.EditorWindow)ToLua.CheckObject<Sango.Tools.EditorWindow>(L, 1);
			Sango.Tools.EditorWindow.RemoveWindow(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_visible(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			bool ret = obj.visible;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index visible on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_windowRect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			UnityEngine.Rect ret = obj.windowRect;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index windowRect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_windowFunc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			Sango.Tools.EditorWindow.WindowFunction ret = obj.windowFunc;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index windowFunc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_windowMinFunc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			Sango.Tools.EditorWindow.WindowFunction ret = obj.windowMinFunc;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index windowMinFunc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_windowName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			string ret = obj.windowName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index windowName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_windowId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			int ret = obj.windowId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index windowId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canClose(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			bool ret = obj.canClose;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index canClose on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dragable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			bool ret = obj.dragable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dragable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_minmaxable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			bool ret = obj.minmaxable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index minmaxable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_skin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			UnityEngine.GUISkin ret = obj.skin;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index skin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_visible(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.visible = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index visible on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_windowRect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 2);
			obj.windowRect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index windowRect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_windowFunc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			Sango.Tools.EditorWindow.WindowFunction arg0 = (Sango.Tools.EditorWindow.WindowFunction)ToLua.CheckDelegate<Sango.Tools.EditorWindow.WindowFunction>(L, 2);

			if (!object.ReferenceEquals(obj.windowFunc, arg0))
			{
				if (obj.windowFunc != null) obj.windowFunc.SubRef();
				obj.windowFunc = arg0;
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index windowFunc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_windowMinFunc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			Sango.Tools.EditorWindow.WindowFunction arg0 = (Sango.Tools.EditorWindow.WindowFunction)ToLua.CheckDelegate<Sango.Tools.EditorWindow.WindowFunction>(L, 2);

			if (!object.ReferenceEquals(obj.windowMinFunc, arg0))
			{
				if (obj.windowMinFunc != null) obj.windowMinFunc.SubRef();
				obj.windowMinFunc = arg0;
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index windowMinFunc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_windowName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.windowName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index windowName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_windowId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.windowId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index windowId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_canClose(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.canClose = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index canClose on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_dragable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.dragable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dragable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_minmaxable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.minmaxable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index minmaxable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_skin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.EditorWindow obj = (Sango.Tools.EditorWindow)o;
			UnityEngine.GUISkin arg0 = (UnityEngine.GUISkin)ToLua.CheckObject<UnityEngine.GUISkin>(L, 2);
			obj.skin = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index skin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Sango_Tools_EditorWindow_WindowFunction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Sango.Tools.EditorWindow.WindowFunction>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Sango.Tools.EditorWindow.WindowFunction>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

