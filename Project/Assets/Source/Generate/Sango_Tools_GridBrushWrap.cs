//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_Tools_GridBrushWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Sango.Tools.GridBrush), typeof(Sango.Tools.BrushBase));
		L.RegFunction("OnEnter", new LuaCSFunction(OnEnter));
		L.RegFunction("TypeIndexToColor", new LuaCSFunction(TypeIndexToColor));
		L.RegFunction("SetTerrainTypeShow", new LuaCSFunction(SetTerrainTypeShow));
		L.RegFunction("SetTerrainMaskShowColor", new LuaCSFunction(SetTerrainMaskShowColor));
		L.RegFunction("GetGridDataProterty", new LuaCSFunction(GetGridDataProterty));
		L.RegFunction("SetGridDataProterty", new LuaCSFunction(SetGridDataProterty));
		L.RegFunction("UpdateTerrainMaskTex", new LuaCSFunction(UpdateTerrainMaskTex));
		L.RegFunction("OnBrushTypeChange", new LuaCSFunction(OnBrushTypeChange));
		L.RegFunction("OnSeasonChanged", new LuaCSFunction(OnSeasonChanged));
		L.RegFunction("Clear", new LuaCSFunction(Clear));
		L.RegFunction("ClearBrushShow", new LuaCSFunction(ClearBrushShow));
		L.RegFunction("OnGUI", new LuaCSFunction(OnGUI));
		L.RegFunction("Update", new LuaCSFunction(Update));
		L.RegFunction("DrawGizmos", new LuaCSFunction(DrawGizmos));
		L.RegFunction("Modify", new LuaCSFunction(Modify));
		L.RegFunction("New", new LuaCSFunction(_CreateSango_Tools_GridBrush));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("size", new LuaCSFunction(get_size), new LuaCSFunction(set_size));
		L.RegVar("opacity", new LuaCSFunction(get_opacity), new LuaCSFunction(set_opacity));
		L.RegVar("brushType", new LuaCSFunction(get_brushType), new LuaCSFunction(set_brushType));
		L.RegVar("terrainTypeTexNames", new LuaCSFunction(get_terrainTypeTexNames), new LuaCSFunction(set_terrainTypeTexNames));
		L.RegVar("terrainTypeTexes", new LuaCSFunction(get_terrainTypeTexes), new LuaCSFunction(set_terrainTypeTexes));
		L.RegVar("terrainTypeTex", new LuaCSFunction(get_terrainTypeTex), new LuaCSFunction(set_terrainTypeTex));
		L.RegVar("terrainTypeMaskTex", new LuaCSFunction(get_terrainTypeMaskTex), new LuaCSFunction(set_terrainTypeMaskTex));
		L.RegVar("terrainTypeMaskCol", new LuaCSFunction(get_terrainTypeMaskCol), new LuaCSFunction(set_terrainTypeMaskCol));
		L.RegVar("terrainTypeMaskRow", new LuaCSFunction(get_terrainTypeMaskRow), new LuaCSFunction(set_terrainTypeMaskRow));
		L.RegVar("showTerrainType", new LuaCSFunction(get_showTerrainType), new LuaCSFunction(set_showTerrainType));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSango_Tools_GridBrush(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Sango.Tools.MapEditor arg0 = (Sango.Tools.MapEditor)ToLua.CheckObject<Sango.Tools.MapEditor>(L, 1);
				Sango.Tools.GridBrush obj = new Sango.Tools.GridBrush(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Sango.Tools.GridBrush.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnEnter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)ToLua.CheckObject<Sango.Tools.GridBrush>(L, 1);
			obj.OnEnter();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TypeIndexToColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)ToLua.CheckObject<Sango.Tools.GridBrush>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			UnityEngine.Color o = obj.TypeIndexToColor(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTerrainTypeShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)ToLua.CheckObject<Sango.Tools.GridBrush>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
			obj.SetTerrainTypeShow(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTerrainMaskShowColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)ToLua.CheckObject<Sango.Tools.GridBrush>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
			int arg3 = (int)LuaDLL.luaL_checkinteger(L, 5);
			int arg4 = (int)LuaDLL.luaL_checkinteger(L, 6);
			obj.SetTerrainMaskShowColor(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGridDataProterty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)ToLua.CheckObject<Sango.Tools.GridBrush>(L, 1);
			Sango.Tools.GridBrush.BrushType arg0 = (Sango.Tools.GridBrush.BrushType)ToLua.CheckObject(L, 2, TypeTraits<Sango.Tools.GridBrush.BrushType>.type);
			Sango.Render.MapGrid.GridData arg1 = (Sango.Render.MapGrid.GridData)ToLua.CheckObject<Sango.Render.MapGrid.GridData>(L, 3);
			byte o = obj.GetGridDataProterty(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetGridDataProterty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)ToLua.CheckObject<Sango.Tools.GridBrush>(L, 1);
			Sango.Tools.GridBrush.BrushType arg0 = (Sango.Tools.GridBrush.BrushType)ToLua.CheckObject(L, 2, TypeTraits<Sango.Tools.GridBrush.BrushType>.type);
			Sango.Render.MapGrid.GridData arg1 = (Sango.Render.MapGrid.GridData)ToLua.CheckObject<Sango.Render.MapGrid.GridData>(L, 3);
			byte arg2 = (byte)LuaDLL.luaL_checkinteger(L, 4);
			Sango.Render.MapGrid.GridData o = obj.SetGridDataProterty(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateTerrainMaskTex(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)ToLua.CheckObject<Sango.Tools.GridBrush>(L, 1);
				obj.UpdateTerrainMaskTex();
				return 0;
			}
			else if (count == 2)
			{
				Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)ToLua.CheckObject<Sango.Tools.GridBrush>(L, 1);
				Sango.Tools.GridBrush.BrushType arg0 = (Sango.Tools.GridBrush.BrushType)ToLua.CheckObject(L, 2, TypeTraits<Sango.Tools.GridBrush.BrushType>.type);
				obj.UpdateTerrainMaskTex(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Tools.GridBrush.UpdateTerrainMaskTex");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnBrushTypeChange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)ToLua.CheckObject<Sango.Tools.GridBrush>(L, 1);
			obj.OnBrushTypeChange();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSeasonChanged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)ToLua.CheckObject<Sango.Tools.GridBrush>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.OnSeasonChanged(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)ToLua.CheckObject<Sango.Tools.GridBrush>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearBrushShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)ToLua.CheckObject<Sango.Tools.GridBrush>(L, 1);
			obj.ClearBrushShow();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnGUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)ToLua.CheckObject<Sango.Tools.GridBrush>(L, 1);
			obj.OnGUI();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)ToLua.CheckObject<Sango.Tools.GridBrush>(L, 1);
			obj.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawGizmos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)ToLua.CheckObject<Sango.Tools.GridBrush>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.DrawGizmos(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Modify(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)ToLua.CheckObject<Sango.Tools.GridBrush>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			Sango.Tools.MapEditor arg1 = (Sango.Tools.MapEditor)ToLua.CheckObject<Sango.Tools.MapEditor>(L, 3);
			obj.Modify(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_size(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			int ret = obj.size;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index size on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_opacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			int ret = obj.opacity;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index opacity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_brushType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			Sango.Tools.GridBrush.BrushType ret = obj.brushType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index brushType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_terrainTypeTexNames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			string[] ret = obj.terrainTypeTexNames;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index terrainTypeTexNames on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_terrainTypeTexes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			UnityEngine.Texture[] ret = obj.terrainTypeTexes;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index terrainTypeTexes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_terrainTypeTex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			UnityEngine.Texture2D ret = obj.terrainTypeTex;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index terrainTypeTex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_terrainTypeMaskTex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			UnityEngine.Texture2D ret = obj.terrainTypeMaskTex;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index terrainTypeMaskTex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_terrainTypeMaskCol(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			int ret = obj.terrainTypeMaskCol;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index terrainTypeMaskCol on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_terrainTypeMaskRow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			int ret = obj.terrainTypeMaskRow;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index terrainTypeMaskRow on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_showTerrainType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			bool ret = obj.showTerrainType;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showTerrainType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_size(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.size = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index size on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_opacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.opacity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index opacity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_brushType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			Sango.Tools.GridBrush.BrushType arg0 = (Sango.Tools.GridBrush.BrushType)ToLua.CheckObject(L, 2, TypeTraits<Sango.Tools.GridBrush.BrushType>.type);
			obj.brushType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index brushType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_terrainTypeTexNames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			obj.terrainTypeTexNames = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index terrainTypeTexNames on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_terrainTypeTexes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			UnityEngine.Texture[] arg0 = ToLua.CheckObjectArray<UnityEngine.Texture>(L, 2);
			obj.terrainTypeTexes = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index terrainTypeTexes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_terrainTypeTex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			UnityEngine.Texture2D arg0 = (UnityEngine.Texture2D)ToLua.CheckObject<UnityEngine.Texture2D>(L, 2);
			obj.terrainTypeTex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index terrainTypeTex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_terrainTypeMaskTex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			UnityEngine.Texture2D arg0 = (UnityEngine.Texture2D)ToLua.CheckObject<UnityEngine.Texture2D>(L, 2);
			obj.terrainTypeMaskTex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index terrainTypeMaskTex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_terrainTypeMaskCol(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.terrainTypeMaskCol = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index terrainTypeMaskCol on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_terrainTypeMaskRow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.terrainTypeMaskRow = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index terrainTypeMaskRow on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_showTerrainType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.GridBrush obj = (Sango.Tools.GridBrush)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.showTerrainType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index showTerrainType on a nil value");
		}
	}
}

