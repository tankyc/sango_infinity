//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_Loader_ObjectLoaderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Sango.Loader.ObjectLoader), typeof(System.Object));
		L.RegFunction("CheckHelper", new LuaCSFunction(CheckHelper));
		L.RegFunction("LoadObject", new LuaCSFunction(LoadObject));
		L.RegFunction("New", new LuaCSFunction(_CreateSango_Loader_ObjectLoader));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSango_Loader_ObjectLoader(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Sango.Loader.ObjectLoader obj = new Sango.Loader.ObjectLoader();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Sango.Loader.ObjectLoader.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckHelper(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Sango.Loader.ObjectLoader.CheckHelper();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				UnityEngine.Object o = Sango.Loader.ObjectLoader.LoadObject(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				UnityEngine.Object o = Sango.Loader.ObjectLoader.LoadObject(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string, System.Type>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Type arg2 = (System.Type)ToLua.ToObject(L, 3);
				UnityEngine.Object o = Sango.Loader.ObjectLoader.LoadObject(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<string, string, System.Type>(L, 1) && TypeChecker.CheckParamsType<object>(L, 4, count - 3))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Type arg2 = (System.Type)ToLua.ToObject(L, 3);
				object[] arg3 = ToLua.ToParamsObject(L, 4, count - 3);
				UnityEngine.Object o = Sango.Loader.ObjectLoader.LoadObject(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<string, System.Type>(L, 1) && TypeChecker.CheckParamsType<object>(L, 3, count - 2))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				object[] arg2 = ToLua.ToParamsObject(L, 3, count - 2);
				UnityEngine.Object o = Sango.Loader.ObjectLoader.LoadObject(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Loader.ObjectLoader.LoadObject");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

