//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_AssetBundleManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Sango.AssetBundleManager), typeof(Sango.Singletion<Sango.AssetBundleManager>));
		L.RegFunction("CreateFromFile", new LuaCSFunction(CreateFromFile));
		L.RegFunction("GetAssetBundle", new LuaCSFunction(GetAssetBundle));
		L.RegFunction("Load", new LuaCSFunction(Load));
		L.RegFunction("LoadAsync", new LuaCSFunction(LoadAsync));
		L.RegFunction("Unload", new LuaCSFunction(Unload));
		L.RegFunction("ContainsAsset", new LuaCSFunction(ContainsAsset));
		L.RegFunction("LoadAsset", new LuaCSFunction(LoadAsset));
		L.RegFunction("LoadAssetAsync", new LuaCSFunction(LoadAssetAsync));
		L.RegFunction("LoadAllAssets", new LuaCSFunction(LoadAllAssets));
		L.RegFunction("LoadAllAssetsAsync", new LuaCSFunction(LoadAllAssetsAsync));
		L.RegFunction("LoadInfo", new LuaCSFunction(LoadInfo));
		L.RegFunction("GetAllDependencies", new LuaCSFunction(GetAllDependencies));
		L.RegFunction("GetDirectDependencies", new LuaCSFunction(GetDirectDependencies));
		L.RegFunction("NameToIndex", new LuaCSFunction(NameToIndex));
		L.RegFunction("IndexToName", new LuaCSFunction(IndexToName));
		L.RegFunction("AsyncProgress", new LuaCSFunction(AsyncProgress));
		L.RegFunction("OnUpdate", new LuaCSFunction(OnUpdate));
		L.RegFunction("Reset", new LuaCSFunction(Reset));
		L.RegFunction("CheckEditorLoad", new LuaCSFunction(CheckEditorLoad));
		L.RegFunction("UnloadUnusedBundles", new LuaCSFunction(UnloadUnusedBundles));
		L.RegFunction("New", new LuaCSFunction(_CreateSango_AssetBundleManager));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("InvalidId", new LuaCSFunction(get_InvalidId), null);
		L.RegVar("ASSETBUNDLELIFE", new LuaCSFunction(get_ASSETBUNDLELIFE), new LuaCSFunction(set_ASSETBUNDLELIFE));
		L.RegVar("MANIFEST_NAME", new LuaCSFunction(get_MANIFEST_NAME), null);
		L.RegFunction("AsyncLoadAssetFinishCall", new LuaCSFunction(Sango_AssetBundleManager_AsyncLoadAssetFinishCall));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSango_AssetBundleManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Sango.AssetBundleManager obj = new Sango.AssetBundleManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Sango.AssetBundleManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateFromFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.AssetBundle o = Sango.AssetBundleManager.CreateFromFile(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAssetBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
			UnityEngine.AssetBundle o = Sango.AssetBundleManager.GetAssetBundle(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			int o = Sango.AssetBundleManager.Load(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
			int o = Sango.AssetBundleManager.LoadAsync(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unload(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<int>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
				Sango.AssetBundleManager.Unload(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				Sango.AssetBundleManager.Unload(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.AssetBundleManager.Unload");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ContainsAsset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			bool o = Sango.AssetBundleManager.ContainsAsset(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAsset(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Object o = Sango.AssetBundleManager.LoadAsset(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Type arg2 = ToLua.CheckMonoType(L, 3);
				UnityEngine.Object o = Sango.AssetBundleManager.LoadAsset(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.AssetBundleManager.LoadAsset");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAssetAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.AssetBundleRequest o = Sango.AssetBundleManager.LoadAssetAsync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Type>(L, 3))
			{
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Type arg2 = (System.Type)ToLua.ToObject(L, 3);
				UnityEngine.AssetBundleRequest o = Sango.AssetBundleManager.LoadAssetAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<LuaInterface.LuaFunction>(L, 3))
			{
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 3);
				Sango.AssetBundleManager.LoadAssetAsync(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<Sango.AssetBundleManager.AsyncLoadAssetFinishCall, System.Type>(L, 3))
			{
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				Sango.AssetBundleManager.AsyncLoadAssetFinishCall arg2 = (Sango.AssetBundleManager.AsyncLoadAssetFinishCall)ToLua.ToObject(L, 3);
				System.Type arg3 = (System.Type)ToLua.ToObject(L, 4);
				Sango.AssetBundleManager.LoadAssetAsync(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<LuaInterface.LuaFunction, System.Type>(L, 3))
			{
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 3);
				System.Type arg3 = (System.Type)ToLua.ToObject(L, 4);
				Sango.AssetBundleManager.LoadAssetAsync(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.AssetBundleManager.LoadAssetAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAllAssets(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
				UnityEngine.Object[] o = Sango.AssetBundleManager.LoadAllAssets(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
				System.Type arg1 = ToLua.CheckMonoType(L, 2);
				UnityEngine.Object[] o = Sango.AssetBundleManager.LoadAllAssets(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.AssetBundleManager.LoadAllAssets");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAllAssetsAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
				UnityEngine.AssetBundleRequest o = Sango.AssetBundleManager.LoadAllAssetsAsync(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int, System.Type>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				UnityEngine.AssetBundleRequest o = Sango.AssetBundleManager.LoadAllAssetsAsync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<int, LuaInterface.LuaFunction>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 2);
				Sango.AssetBundleManager.LoadAllAssetsAsync(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, LuaInterface.LuaFunction>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 2);
				int o = Sango.AssetBundleManager.LoadAllAssetsAsync(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, LuaInterface.LuaFunction, System.Type>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 2);
				System.Type arg2 = (System.Type)ToLua.ToObject(L, 3);
				Sango.AssetBundleManager.LoadAllAssetsAsync(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, LuaInterface.LuaFunction, System.Type>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 2);
				System.Type arg2 = (System.Type)ToLua.ToObject(L, 3);
				int o = Sango.AssetBundleManager.LoadAllAssetsAsync(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.AssetBundleManager.LoadAllAssetsAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1;
			UnityEngine.AssetBundle arg2 = null;
			Sango.AssetBundleManager.LoadInfo(arg0, out arg1, out arg2);
			LuaDLL.lua_pushinteger(L, arg1);
			ToLua.Push(L, arg2);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllDependencies(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string[] o = Sango.AssetBundleManager.GetAllDependencies(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDirectDependencies(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string[] o = Sango.AssetBundleManager.GetDirectDependencies(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NameToIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			int o = Sango.AssetBundleManager.NameToIndex(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IndexToName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
			string o = Sango.AssetBundleManager.IndexToName(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AsyncProgress(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
				float o = Sango.AssetBundleManager.AsyncProgress(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2)
			{
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
				System.Collections.Generic.List<int> arg1 = (System.Collections.Generic.List<int>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.List<int>>.type);
				float o = Sango.AssetBundleManager.AsyncProgress(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.AssetBundleManager.AsyncProgress");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.AssetBundleManager obj = (Sango.AssetBundleManager)ToLua.CheckObject<Sango.AssetBundleManager>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.OnUpdate(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Sango.AssetBundleManager.Reset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckEditorLoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = Sango.AssetBundleManager.CheckEditorLoad();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadUnusedBundles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Sango.AssetBundleManager.UnloadUnusedBundles();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InvalidId(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Sango.AssetBundleManager.InvalidId);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ASSETBUNDLELIFE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Sango.AssetBundleManager.ASSETBUNDLELIFE);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MANIFEST_NAME(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Sango.AssetBundleManager.MANIFEST_NAME);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ASSETBUNDLELIFE(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Sango.AssetBundleManager.ASSETBUNDLELIFE = arg0;
			Sango.AssetBundleManager.ASSETBUNDLELIFE = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Sango_AssetBundleManager_AsyncLoadAssetFinishCall(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Sango.AssetBundleManager.AsyncLoadAssetFinishCall>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Sango.AssetBundleManager.AsyncLoadAssetFinishCall>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

