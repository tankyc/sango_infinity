//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_IO_FileModeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(System.IO.FileMode));
		L.RegVar("CreateNew", new LuaCSFunction(get_CreateNew), null);
		L.RegVar("Create", new LuaCSFunction(get_Create), null);
		L.RegVar("Open", new LuaCSFunction(get_Open), null);
		L.RegVar("OpenOrCreate", new LuaCSFunction(get_OpenOrCreate), null);
		L.RegVar("Truncate", new LuaCSFunction(get_Truncate), null);
		L.RegVar("Append", new LuaCSFunction(get_Append), null);
		L.RegFunction("IntToEnum", new LuaCSFunction(IntToEnum));
		L.EndEnum();
		TypeTraits<System.IO.FileMode>.Check = CheckType;
		StackTraits<System.IO.FileMode>.Push = Push;
	}

	static void Push(IntPtr L, System.IO.FileMode arg)
	{
		ToLua.Push(L, arg);
	}

	static Type TypeOf_System_IO_FileMode = typeof(System.IO.FileMode);

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(TypeOf_System_IO_FileMode, L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CreateNew(IntPtr L)
	{
		ToLua.Push(L, System.IO.FileMode.CreateNew);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Create(IntPtr L)
	{
		ToLua.Push(L, System.IO.FileMode.Create);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Open(IntPtr L)
	{
		ToLua.Push(L, System.IO.FileMode.Open);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OpenOrCreate(IntPtr L)
	{
		ToLua.Push(L, System.IO.FileMode.OpenOrCreate);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Truncate(IntPtr L)
	{
		ToLua.Push(L, System.IO.FileMode.Truncate);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Append(IntPtr L)
	{
		ToLua.Push(L, System.IO.FileMode.Append);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
		System.IO.FileMode o = (System.IO.FileMode)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

