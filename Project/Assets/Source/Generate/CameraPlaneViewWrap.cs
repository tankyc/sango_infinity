//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CameraPlaneViewWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(CameraPlaneView), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("DrawRect", new LuaCSFunction(DrawRect));
		L.RegFunction("AddDrawRect", new LuaCSFunction(AddDrawRect));
		L.RegFunction("GetPlaneCorners", new LuaCSFunction(GetPlaneCorners));
		L.RegFunction("GetFarPlaneCorners", new LuaCSFunction(GetFarPlaneCorners));
		L.RegFunction("GetRayPlaneIntersection", new LuaCSFunction(GetRayPlaneIntersection));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("viewCamera", new LuaCSFunction(get_viewCamera), new LuaCSFunction(set_viewCamera));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DrawRect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
			CameraPlaneView.DrawRect(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddDrawRect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				CameraPlaneView.AddDrawRect(arg0);
				return 0;
			}
			else if (count == 4)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				CameraPlaneView.AddDrawRect(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CameraPlaneView.AddDrawRect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlaneCorners(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.Plane arg0 = StackTraits<UnityEngine.Plane>.Check(L, 1);
				UnityEngine.Camera arg1 = (UnityEngine.Camera)ToLua.CheckObject<UnityEngine.Camera>(L, 2);
				UnityEngine.Vector3[] arg2 = null;
				bool o = CameraPlaneView.GetPlaneCorners(ref arg0, arg1, out arg2);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.PushValue(L, arg0);
				ToLua.Push(L, arg2);
				return 3;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Plane, UnityEngine.Camera, float, UnityEngine.Vector3[]>(L, 1))
			{
				UnityEngine.Plane arg0 = StackTraits<UnityEngine.Plane>.To(L, 1);
				UnityEngine.Camera arg1 = (UnityEngine.Camera)ToLua.ToObject(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				UnityEngine.Vector3[] arg3 = ToLua.ToStructArray<UnityEngine.Vector3>(L, 4);
				bool o = CameraPlaneView.GetPlaneCorners(ref arg0, arg1, arg2, ref arg3);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.PushValue(L, arg0);
				ToLua.Push(L, arg3);
				return 3;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Camera, LuaInterface.LuaOut<UnityEngine.Vector3[]>>(L, 1))
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Camera arg2 = (UnityEngine.Camera)ToLua.ToObject(L, 3);
				UnityEngine.Vector3[] arg3 = null;
				bool o = CameraPlaneView.GetPlaneCorners(arg0, arg1, arg2, out arg3);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.Push(L, arg3);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CameraPlaneView.GetPlaneCorners");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFarPlaneCorners(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UnityEngine.Plane arg0 = StackTraits<UnityEngine.Plane>.Check(L, 1);
			UnityEngine.Camera arg1 = (UnityEngine.Camera)ToLua.CheckObject<UnityEngine.Camera>(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			UnityEngine.Vector3[] arg3 = ToLua.CheckStructArray<UnityEngine.Vector3>(L, 4);
			bool o = CameraPlaneView.GetFarPlaneCorners(ref arg0, arg1, arg2, ref arg3);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.PushValue(L, arg0);
			ToLua.Push(L, arg3);
			return 3;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRayPlaneIntersection(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.Plane arg0 = StackTraits<UnityEngine.Plane>.Check(L, 1);
				UnityEngine.Ray arg1 = ToLua.ToRay(L, 2);
				UnityEngine.Vector3 arg2;
				bool o = CameraPlaneView.GetRayPlaneIntersection(ref arg0, arg1, out arg2);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.PushValue(L, arg0);
				ToLua.Push(L, arg2);
				return 3;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Plane, UnityEngine.Ray, float, LuaInterface.LuaOut<UnityEngine.Vector3>>(L, 1))
			{
				UnityEngine.Plane arg0 = StackTraits<UnityEngine.Plane>.To(L, 1);
				UnityEngine.Ray arg1 = ToLua.ToRay(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				UnityEngine.Vector3 arg3;
				bool o = CameraPlaneView.GetRayPlaneIntersection(ref arg0, arg1, arg2, out arg3);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.PushValue(L, arg0);
				ToLua.Push(L, arg3);
				return 3;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Ray, LuaInterface.LuaOut<UnityEngine.Vector3>>(L, 1))
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Ray arg2 = ToLua.ToRay(L, 3);
				UnityEngine.Vector3 arg3;
				bool o = CameraPlaneView.GetRayPlaneIntersection(arg0, arg1, arg2, out arg3);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.Push(L, arg3);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CameraPlaneView.GetRayPlaneIntersection");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_viewCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPlaneView obj = (CameraPlaneView)o;
			UnityEngine.Camera ret = obj.viewCamera;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index viewCamera on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_viewCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CameraPlaneView obj = (CameraPlaneView)o;
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckObject<UnityEngine.Camera>(L, 2);
			obj.viewCamera = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index viewCamera on a nil value");
		}
	}
}

