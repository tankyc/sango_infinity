//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_Render_MapObjectWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Sango.Render.MapObject), typeof(Sango.Behaviour));
		L.RegFunction("Create", new LuaCSFunction(Create));
		L.RegFunction("Awake", new LuaCSFunction(Awake));
		L.RegFunction("OnSelectableChange", new LuaCSFunction(OnSelectableChange));
		L.RegFunction("OnVisibleChange", new LuaCSFunction(OnVisibleChange));
		L.RegFunction("Overlaps", new LuaCSFunction(Overlaps));
		L.RegFunction("OnClick", new LuaCSFunction(OnClick));
		L.RegFunction("OnPointerEnter", new LuaCSFunction(OnPointerEnter));
		L.RegFunction("OnPointerExit", new LuaCSFunction(OnPointerExit));
		L.RegFunction("SetOutlineShow", new LuaCSFunction(SetOutlineShow));
		L.RegFunction("CreateModel", new LuaCSFunction(CreateModel));
		L.RegFunction("ReLoadModels", new LuaCSFunction(ReLoadModels));
		L.RegFunction("ClearModels", new LuaCSFunction(ClearModels));
		L.RegFunction("ReCheckVisible", new LuaCSFunction(ReCheckVisible));
		L.RegFunction("EditorShow", new LuaCSFunction(EditorShow));
		L.RegFunction("GetTransform", new LuaCSFunction(GetTransform));
		L.RegFunction("SetParent", new LuaCSFunction(SetParent));
		L.RegFunction("AddToMap", new LuaCSFunction(AddToMap));
		L.RegFunction("Clear", new LuaCSFunction(Clear));
		L.RegFunction("Destroy", new LuaCSFunction(Destroy));
		L.RegFunction("GetGameObject", new LuaCSFunction(GetGameObject));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("modelLoadedCallback", new LuaCSFunction(get_modelLoadedCallback), new LuaCSFunction(set_modelLoadedCallback));
		L.RegVar("loadedModel", new LuaCSFunction(get_loadedModel), new LuaCSFunction(set_loadedModel));
		L.RegVar("manager", new LuaCSFunction(get_manager), new LuaCSFunction(set_manager));
		L.RegVar("remainInView", new LuaCSFunction(get_remainInView), new LuaCSFunction(set_remainInView));
		L.RegVar("bounds", new LuaCSFunction(get_bounds), new LuaCSFunction(set_bounds));
		L.RegVar("objId", new LuaCSFunction(get_objId), new LuaCSFunction(set_objId));
		L.RegVar("bindId", new LuaCSFunction(get_bindId), new LuaCSFunction(set_bindId));
		L.RegVar("objType", new LuaCSFunction(get_objType), new LuaCSFunction(set_objType));
		L.RegVar("modelId", new LuaCSFunction(get_modelId), new LuaCSFunction(set_modelId));
		L.RegVar("isStatic", new LuaCSFunction(get_isStatic), new LuaCSFunction(set_isStatic));
		L.RegVar("visible", new LuaCSFunction(get_visible), new LuaCSFunction(set_visible));
		L.RegVar("selectable", new LuaCSFunction(get_selectable), new LuaCSFunction(set_selectable));
		L.RegVar("position", new LuaCSFunction(get_position), new LuaCSFunction(set_position));
		L.RegVar("rotation", new LuaCSFunction(get_rotation), new LuaCSFunction(set_rotation));
		L.RegVar("forward", new LuaCSFunction(get_forward), new LuaCSFunction(set_forward));
		L.RegVar("scale", new LuaCSFunction(get_scale), new LuaCSFunction(set_scale));
		L.RegVar("coords", new LuaCSFunction(get_coords), new LuaCSFunction(set_coords));
		L.RegVar("worldBounds", new LuaCSFunction(get_worldBounds), null);
		L.RegFunction("ModelLoadedCallback", new LuaCSFunction(Sango_Render_MapObject_ModelLoadedCallback));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Create(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Sango.Render.MapObject o = Sango.Render.MapObject.Create(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				Sango.Render.MapObject o = Sango.Render.MapObject.Create(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				Sango.Render.MapObject o = Sango.Render.MapObject.Create(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
				UnityEngine.Vector3 arg4 = ToLua.ToVector3(L, 5);
				Sango.Render.MapObject o = Sango.Render.MapObject.Create(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Render.MapObject.Create");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Awake(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
			obj.Awake();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSelectableChange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
			obj.OnSelectableChange();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnVisibleChange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
			obj.OnVisibleChange();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Overlaps(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
			Sango.Tools.Rect arg0 = StackTraits<Sango.Tools.Rect>.Check(L, 2);
			bool o = obj.Overlaps(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
			obj.OnClick();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerEnter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
			obj.OnPointerEnter();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerExit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
			obj.OnPointerExit();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOutlineShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
			UnityEngine.Material arg0 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 2);
			obj.SetOutlineShow(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateModel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 2);
				obj.CreateModel(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.CreateModel(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				obj.CreateModel(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
				obj.CreateModel(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Render.MapObject.CreateModel");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReLoadModels(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
			obj.ReLoadModels();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearModels(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
			obj.ClearModels();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReCheckVisible(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
			obj.ReCheckVisible();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EditorShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.EditorShow(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTransform(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
				UnityEngine.Transform o = obj.GetTransform();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Transform o = obj.GetTransform(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Render.MapObject.GetTransform");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetParent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
				obj.SetParent(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.SetParent(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Render.MapObject.SetParent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddToMap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.AddToMap(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
			obj.Destroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)ToLua.CheckObject<Sango.Render.MapObject>(L, 1);
			UnityEngine.GameObject o = obj.GetGameObject();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_modelLoadedCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			Sango.Render.MapObject.ModelLoadedCallback ret = obj.modelLoadedCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index modelLoadedCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_loadedModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			UnityEngine.GameObject ret = obj.loadedModel;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index loadedModel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_manager(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			Sango.Render.MapRender ret = obj.manager;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index manager on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_remainInView(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			bool ret = obj.remainInView;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index remainInView on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bounds(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			Sango.Tools.Rect ret = obj.bounds;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bounds on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_objId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			int ret = obj.objId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index objId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bindId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			int ret = obj.bindId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bindId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_objType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			int ret = obj.objType;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index objType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_modelId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			int ret = obj.modelId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index modelId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isStatic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			bool ret = obj.isStatic;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isStatic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_visible(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			bool ret = obj.visible;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index visible on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_selectable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			bool ret = obj.selectable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index selectable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			UnityEngine.Vector3 ret = obj.position;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			UnityEngine.Vector3 ret = obj.rotation;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_forward(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			UnityEngine.Vector3 ret = obj.forward;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index forward on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_scale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			UnityEngine.Vector3 ret = obj.scale;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_coords(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			UnityEngine.Vector2Int ret = obj.coords;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index coords on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_worldBounds(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			Sango.Tools.Rect ret = obj.worldBounds;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index worldBounds on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_modelLoadedCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			Sango.Render.MapObject.ModelLoadedCallback arg0 = (Sango.Render.MapObject.ModelLoadedCallback)ToLua.CheckDelegate<Sango.Render.MapObject.ModelLoadedCallback>(L, 2);

			if (!object.ReferenceEquals(obj.modelLoadedCallback, arg0))
			{
				if (obj.modelLoadedCallback != null) obj.modelLoadedCallback.SubRef();
				obj.modelLoadedCallback = arg0;
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index modelLoadedCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_loadedModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject<UnityEngine.GameObject>(L, 2);
			obj.loadedModel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index loadedModel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_manager(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			Sango.Render.MapRender arg0 = (Sango.Render.MapRender)ToLua.CheckObject<Sango.Render.MapRender>(L, 2);
			obj.manager = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index manager on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_remainInView(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.remainInView = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index remainInView on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bounds(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			Sango.Tools.Rect arg0 = StackTraits<Sango.Tools.Rect>.Check(L, 2);
			obj.bounds = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bounds on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_objId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.objId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index objId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bindId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.bindId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bindId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_objType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.objType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index objType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_modelId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.modelId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index modelId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isStatic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isStatic = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isStatic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_visible(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.visible = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index visible on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_selectable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.selectable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index selectable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.rotation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_forward(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.forward = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index forward on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_scale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.scale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_coords(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapObject obj = (Sango.Render.MapObject)o;
			UnityEngine.Vector2Int arg0 = StackTraits<UnityEngine.Vector2Int>.Check(L, 2);
			obj.coords = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index coords on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Sango_Render_MapObject_ModelLoadedCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Sango.Render.MapObject.ModelLoadedCallback>.Create(func);
				ToLua.Push(L, arg1);
				func.Dispose();
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Sango.Render.MapObject.ModelLoadedCallback>.Create(func, self);
				ToLua.Push(L, arg1);
				func.Dispose();
				self.Dispose();
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

