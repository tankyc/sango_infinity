//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_Render_MapGridWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Sango.Render.MapGrid), typeof(Sango.Render.MapProperty));
		L.RegFunction("Init", new LuaCSFunction(Init));
		L.RegFunction("Clear", new LuaCSFunction(Clear));
		L.RegFunction("Create", new LuaCSFunction(Create));
		L.RegFunction("ClearGridData", new LuaCSFunction(ClearGridData));
		L.RegFunction("SetGridTexture", new LuaCSFunction(SetGridTexture));
		L.RegFunction("ShowGrid", new LuaCSFunction(ShowGrid));
		L.RegFunction("SetDarkMask", new LuaCSFunction(SetDarkMask));
		L.RegFunction("SetGridEnable", new LuaCSFunction(SetGridEnable));
		L.RegFunction("GetMovable", new LuaCSFunction(GetMovable));
		L.RegFunction("BeginUpdateMovable", new LuaCSFunction(BeginUpdateMovable));
		L.RegFunction("SetMovable", new LuaCSFunction(SetMovable));
		L.RegFunction("EndUpdateMovable", new LuaCSFunction(EndUpdateMovable));
		L.RegFunction("SetTerrainType", new LuaCSFunction(SetTerrainType));
		L.RegFunction("SetGridMaskColor", new LuaCSFunction(SetGridMaskColor));
		L.RegFunction("ApplyGridMask", new LuaCSFunction(ApplyGridMask));
		L.RegFunction("SetRangMaskColor", new LuaCSFunction(SetRangMaskColor));
		L.RegFunction("ApplyRangMask", new LuaCSFunction(ApplyRangMask));
		L.RegFunction("GetGridData", new LuaCSFunction(GetGridData));
		L.RegFunction("GetGridHeight", new LuaCSFunction(GetGridHeight));
		L.RegFunction("CoordsToPosition", new LuaCSFunction(CoordsToPosition));
		L.RegFunction("PositionToCoords", new LuaCSFunction(PositionToCoords));
		L.RegFunction("Update", new LuaCSFunction(Update));
		L.RegFunction("New", new LuaCSFunction(_CreateSango_Render_MapGrid));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("hexWorld", new LuaCSFunction(get_hexWorld), new LuaCSFunction(set_hexWorld));
		L.RegVar("bouns", new LuaCSFunction(get_bouns), new LuaCSFunction(set_bouns));
		L.RegVar("gridSize", new LuaCSFunction(get_gridSize), new LuaCSFunction(set_gridSize));
		L.RegVar("gridVertexCuont", new LuaCSFunction(get_gridVertexCuont), new LuaCSFunction(set_gridVertexCuont));
		L.RegVar("gridTexture", new LuaCSFunction(get_gridTexture), new LuaCSFunction(set_gridTexture));
		L.RegVar("gridTextureName", new LuaCSFunction(get_gridTextureName), new LuaCSFunction(set_gridTextureName));
		L.RegVar("GridMaskTexture", new LuaCSFunction(get_GridMaskTexture), new LuaCSFunction(set_GridMaskTexture));
		L.RegVar("RangeMaskTexture", new LuaCSFunction(get_RangeMaskTexture), new LuaCSFunction(set_RangeMaskTexture));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSango_Render_MapGrid(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Sango.Render.MapRender arg0 = (Sango.Render.MapRender)ToLua.CheckObject<Sango.Render.MapRender>(L, 1);
				Sango.Render.MapGrid obj = new Sango.Render.MapGrid(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Sango.Render.MapGrid.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Create(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.Create(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearGridData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			obj.ClearGridData();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetGridTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetGridTexture(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowGrid(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ShowGrid(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDarkMask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetDarkMask(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetGridEnable(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.SetGridEnable(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
				obj.SetGridEnable(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Render.MapGrid.SetGridEnable");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMovable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			Sango.Render.MapGrid.GridData arg0 = (Sango.Render.MapGrid.GridData)ToLua.CheckObject<Sango.Render.MapGrid.GridData>(L, 2);
			bool o = obj.GetMovable(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginUpdateMovable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			obj.BeginUpdateMovable(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMovable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			obj.SetMovable(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndUpdateMovable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			obj.EndUpdateMovable();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTerrainType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
			obj.SetTerrainType(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetGridMaskColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			UnityEngine.Color arg2 = ToLua.ToColor(L, 4);
			obj.SetGridMaskColor(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyGridMask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			obj.ApplyGridMask();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRangMaskColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			UnityEngine.Color arg2 = ToLua.ToColor(L, 4);
			obj.SetRangMaskColor(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyRangMask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			obj.ApplyRangMask();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGridData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			Sango.Render.MapGrid.GridData o = obj.GetGridData(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGridHeight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			float o = obj.GetGridHeight(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CoordsToPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			UnityEngine.Vector3 o = obj.CoordsToPosition(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PositionToCoords(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			UnityEngine.Vector2Int o = obj.PositionToCoords(arg0, arg1);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
				obj.Update();
				return 0;
			}
			else if (count == 2)
			{
				Sango.Render.MapGrid obj = (Sango.Render.MapGrid)ToLua.CheckObject<Sango.Render.MapGrid>(L, 1);
				Sango.Tools.Rect arg0 = StackTraits<Sango.Tools.Rect>.Check(L, 2);
				obj.Update(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Render.MapGrid.Update");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hexWorld(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)o;
			Sango.Hexagon.HexWorld ret = obj.hexWorld;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hexWorld on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bouns(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)o;
			UnityEngine.Vector2Int ret = obj.bouns;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bouns on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gridSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)o;
			int ret = obj.gridSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gridSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gridVertexCuont(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)o;
			int ret = obj.gridVertexCuont;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gridVertexCuont on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gridTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)o;
			UnityEngine.Texture ret = obj.gridTexture;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gridTexture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gridTextureName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)o;
			string ret = obj.gridTextureName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gridTextureName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GridMaskTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)o;
			UnityEngine.Texture2D ret = obj.GridMaskTexture;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GridMaskTexture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RangeMaskTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)o;
			UnityEngine.Texture2D ret = obj.RangeMaskTexture;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RangeMaskTexture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hexWorld(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)o;
			Sango.Hexagon.HexWorld arg0 = (Sango.Hexagon.HexWorld)ToLua.CheckObject<Sango.Hexagon.HexWorld>(L, 2);
			obj.hexWorld = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hexWorld on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bouns(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)o;
			UnityEngine.Vector2Int arg0 = StackTraits<UnityEngine.Vector2Int>.Check(L, 2);
			obj.bouns = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bouns on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_gridSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.gridSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gridSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_gridVertexCuont(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.gridVertexCuont = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gridVertexCuont on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_gridTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)o;
			UnityEngine.Texture arg0 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
			obj.gridTexture = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gridTexture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_gridTextureName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.gridTextureName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gridTextureName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GridMaskTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)o;
			UnityEngine.Texture2D arg0 = (UnityEngine.Texture2D)ToLua.CheckObject<UnityEngine.Texture2D>(L, 2);
			obj.GridMaskTexture = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GridMaskTexture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RangeMaskTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapGrid obj = (Sango.Render.MapGrid)o;
			UnityEngine.Texture2D arg0 = (UnityEngine.Texture2D)ToLua.CheckObject<UnityEngine.Texture2D>(L, 2);
			obj.RangeMaskTexture = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RangeMaskTexture on a nil value");
		}
	}
}

