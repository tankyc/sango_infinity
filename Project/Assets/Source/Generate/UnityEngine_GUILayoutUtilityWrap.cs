//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_GUILayoutUtilityWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.GUILayoutUtility), typeof(System.Object));
		L.RegFunction("GetRect", new LuaCSFunction(GetRect));
		L.RegFunction("GetLastRect", new LuaCSFunction(GetLastRect));
		L.RegFunction("GetAspectRect", new LuaCSFunction(GetAspectRect));
		L.RegFunction("New", new LuaCSFunction(_CreateUnityEngine_GUILayoutUtility));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_GUILayoutUtility(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEngine.GUILayoutUtility obj = new UnityEngine.GUILayoutUtility();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.GUILayoutUtility.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<float, float>(L, 1))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.Rect o = UnityEngine.GUILayoutUtility.GetRect(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.GUIContent, UnityEngine.GUIStyle>(L, 1))
			{
				UnityEngine.GUIContent arg0 = (UnityEngine.GUIContent)ToLua.ToObject(L, 1);
				UnityEngine.GUIStyle arg1 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 2);
				UnityEngine.Rect o = UnityEngine.GUILayoutUtility.GetRect(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<float, float, UnityEngine.GUIStyle>(L, 1))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				UnityEngine.Rect o = UnityEngine.GUILayoutUtility.GetRect(arg0, arg1, arg2);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<float, float, float, float>(L, 1))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				UnityEngine.Rect o = UnityEngine.GUILayoutUtility.GetRect(arg0, arg1, arg2, arg3);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<float, float, float, float, UnityEngine.GUIStyle>(L, 1))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				UnityEngine.GUIStyle arg4 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 5);
				UnityEngine.Rect o = UnityEngine.GUILayoutUtility.GetRect(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<float, float, float, float, UnityEngine.GUIStyle>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.GUILayoutOption>(L, 6, count - 5))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				UnityEngine.GUIStyle arg4 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 5);
				UnityEngine.GUILayoutOption[] arg5 = ToLua.ToParamsObject<UnityEngine.GUILayoutOption>(L, 6, count - 5);
				UnityEngine.Rect o = UnityEngine.GUILayoutUtility.GetRect(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<float, float, float, float>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.GUILayoutOption>(L, 5, count - 4))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				UnityEngine.GUILayoutOption[] arg4 = ToLua.ToParamsObject<UnityEngine.GUILayoutOption>(L, 5, count - 4);
				UnityEngine.Rect o = UnityEngine.GUILayoutUtility.GetRect(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<float, float, UnityEngine.GUIStyle>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.GUILayoutOption>(L, 4, count - 3))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 3);
				UnityEngine.GUILayoutOption[] arg3 = ToLua.ToParamsObject<UnityEngine.GUILayoutOption>(L, 4, count - 3);
				UnityEngine.Rect o = UnityEngine.GUILayoutUtility.GetRect(arg0, arg1, arg2, arg3);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<float, float>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.GUILayoutOption>(L, 3, count - 2))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				UnityEngine.GUILayoutOption[] arg2 = ToLua.ToParamsObject<UnityEngine.GUILayoutOption>(L, 3, count - 2);
				UnityEngine.Rect o = UnityEngine.GUILayoutUtility.GetRect(arg0, arg1, arg2);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<UnityEngine.GUIContent, UnityEngine.GUIStyle>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.GUILayoutOption>(L, 3, count - 2))
			{
				UnityEngine.GUIContent arg0 = (UnityEngine.GUIContent)ToLua.ToObject(L, 1);
				UnityEngine.GUIStyle arg1 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 2);
				UnityEngine.GUILayoutOption[] arg2 = ToLua.ToParamsObject<UnityEngine.GUILayoutOption>(L, 3, count - 2);
				UnityEngine.Rect o = UnityEngine.GUILayoutUtility.GetRect(arg0, arg1, arg2);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUILayoutUtility.GetRect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLastRect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.Rect o = UnityEngine.GUILayoutUtility.GetLastRect();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAspectRect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<float>(L, 1))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				UnityEngine.Rect o = UnityEngine.GUILayoutUtility.GetAspectRect(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<float, UnityEngine.GUIStyle>(L, 1))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				UnityEngine.GUIStyle arg1 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 2);
				UnityEngine.Rect o = UnityEngine.GUILayoutUtility.GetAspectRect(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<float, UnityEngine.GUIStyle>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.GUILayoutOption>(L, 3, count - 2))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				UnityEngine.GUIStyle arg1 = (UnityEngine.GUIStyle)ToLua.ToObject(L, 2);
				UnityEngine.GUILayoutOption[] arg2 = ToLua.ToParamsObject<UnityEngine.GUILayoutOption>(L, 3, count - 2);
				UnityEngine.Rect o = UnityEngine.GUILayoutUtility.GetAspectRect(arg0, arg1, arg2);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<float>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.GUILayoutOption>(L, 2, count - 1))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				UnityEngine.GUILayoutOption[] arg1 = ToLua.ToParamsObject<UnityEngine.GUILayoutOption>(L, 2, count - 1);
				UnityEngine.Rect o = UnityEngine.GUILayoutUtility.GetAspectRect(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GUILayoutUtility.GetAspectRect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

