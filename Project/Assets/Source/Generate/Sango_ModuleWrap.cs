//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_ModuleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Sango.Module), typeof(System.Object));
		L.RegFunction("HasScript", new LuaCSFunction(HasScript));
		L.RegFunction("AttachScript", new LuaCSFunction(AttachScript));
		L.RegFunction("GetTable", new LuaCSFunction(GetTable));
		L.RegFunction("DetachScript", new LuaCSFunction(DetachScript));
		L.RegFunction("New", new LuaCSFunction(_CreateSango_Module));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSango_Module(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Sango.Module obj = new Sango.Module();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Sango.Module.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasScript(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Module obj = (Sango.Module)ToLua.CheckObject<Sango.Module>(L, 1);
			bool o = obj.HasScript();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AttachScript(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Sango.Module obj = (Sango.Module)ToLua.CheckObject<Sango.Module>(L, 1);
				LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
				obj.AttachScript(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Sango.Module obj = (Sango.Module)ToLua.CheckObject<Sango.Module>(L, 1);
				LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.AttachScript(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Module.AttachScript");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Module obj = (Sango.Module)ToLua.CheckObject<Sango.Module>(L, 1);
			LuaInterface.LuaTable o = obj.GetTable();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DetachScript(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Sango.Module obj = (Sango.Module)ToLua.CheckObject<Sango.Module>(L, 1);
				obj.DetachScript();
				return 0;
			}
			else if (count == 2)
			{
				Sango.Module obj = (Sango.Module)ToLua.CheckObject<Sango.Module>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.DetachScript(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Module.DetachScript");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

