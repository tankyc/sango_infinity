//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_Render_MapSkyBoxWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Sango.Render.MapSkyBox), typeof(Sango.Render.MapProperty));
		L.RegFunction("Init", new LuaCSFunction(Init));
		L.RegFunction("Clear", new LuaCSFunction(Clear));
		L.RegFunction("Create", new LuaCSFunction(Create));
		L.RegFunction("SetVisible", new LuaCSFunction(SetVisible));
		L.RegFunction("UpdateRender", new LuaCSFunction(UpdateRender));
		L.RegFunction("Update", new LuaCSFunction(Update));
		L.RegFunction("New", new LuaCSFunction(_CreateSango_Render_MapSkyBox));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("sky_radius_len", new LuaCSFunction(get_sky_radius_len), new LuaCSFunction(set_sky_radius_len));
		L.RegVar("sky_height", new LuaCSFunction(get_sky_height), new LuaCSFunction(set_sky_height));
		L.RegVar("sky_offset", new LuaCSFunction(get_sky_offset), new LuaCSFunction(set_sky_offset));
		L.RegVar("sky_material_shader", new LuaCSFunction(get_sky_material_shader), new LuaCSFunction(set_sky_material_shader));
		L.RegVar("sky_blend_start", new LuaCSFunction(get_sky_blend_start), new LuaCSFunction(set_sky_blend_start));
		L.RegVar("sky_blend_end", new LuaCSFunction(get_sky_blend_end), new LuaCSFunction(set_sky_blend_end));
		L.RegVar("sky_mix_begin", new LuaCSFunction(get_sky_mix_begin), new LuaCSFunction(set_sky_mix_begin));
		L.RegVar("sky_mix_end", new LuaCSFunction(get_sky_mix_end), new LuaCSFunction(set_sky_mix_end));
		L.RegVar("sky_mix_power", new LuaCSFunction(get_sky_mix_power), new LuaCSFunction(set_sky_mix_power));
		L.RegVar("blendStart", new LuaCSFunction(get_blendStart), new LuaCSFunction(set_blendStart));
		L.RegVar("blendEnd", new LuaCSFunction(get_blendEnd), new LuaCSFunction(set_blendEnd));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSango_Render_MapSkyBox(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Sango.Render.MapRender arg0 = (Sango.Render.MapRender)ToLua.CheckObject<Sango.Render.MapRender>(L, 1);
				Sango.Render.MapSkyBox obj = new Sango.Render.MapSkyBox(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Sango.Render.MapSkyBox.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)ToLua.CheckObject<Sango.Render.MapSkyBox>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)ToLua.CheckObject<Sango.Render.MapSkyBox>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Create(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)ToLua.CheckObject<Sango.Render.MapSkyBox>(L, 1);
			UnityEngine.Transform o = obj.Create();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVisible(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)ToLua.CheckObject<Sango.Render.MapSkyBox>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetVisible(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateRender(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)ToLua.CheckObject<Sango.Render.MapSkyBox>(L, 1);
			obj.UpdateRender();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)ToLua.CheckObject<Sango.Render.MapSkyBox>(L, 1);
			obj.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sky_radius_len(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float ret = obj.sky_radius_len;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sky_radius_len on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sky_height(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float ret = obj.sky_height;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sky_height on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sky_offset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float ret = obj.sky_offset;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sky_offset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sky_material_shader(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			string ret = obj.sky_material_shader;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sky_material_shader on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sky_blend_start(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float ret = obj.sky_blend_start;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sky_blend_start on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sky_blend_end(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float ret = obj.sky_blend_end;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sky_blend_end on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sky_mix_begin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float ret = obj.sky_mix_begin;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sky_mix_begin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sky_mix_end(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float ret = obj.sky_mix_end;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sky_mix_end on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sky_mix_power(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float ret = obj.sky_mix_power;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sky_mix_power on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_blendStart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float ret = obj.blendStart;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index blendStart on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_blendEnd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float ret = obj.blendEnd;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index blendEnd on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sky_radius_len(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.sky_radius_len = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sky_radius_len on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sky_height(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.sky_height = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sky_height on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sky_offset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.sky_offset = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sky_offset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sky_material_shader(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.sky_material_shader = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sky_material_shader on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sky_blend_start(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.sky_blend_start = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sky_blend_start on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sky_blend_end(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.sky_blend_end = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sky_blend_end on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sky_mix_begin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.sky_mix_begin = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sky_mix_begin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sky_mix_end(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.sky_mix_end = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sky_mix_end on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sky_mix_power(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.sky_mix_power = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sky_mix_power on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_blendStart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.blendStart = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index blendStart on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_blendEnd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapSkyBox obj = (Sango.Render.MapSkyBox)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.blendEnd = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index blendEnd on a nil value");
		}
	}
}

