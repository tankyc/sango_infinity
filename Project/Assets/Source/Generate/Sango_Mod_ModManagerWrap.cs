//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_Mod_ModManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Sango.Mod.ModManager), typeof(Sango.Singletion<Sango.Mod.ModManager>));
		L.RegFunction("GetEnabledMods", new LuaCSFunction(GetEnabledMods));
		L.RegFunction("Init", new LuaCSFunction(Init));
		L.RegFunction("LoadMod", new LuaCSFunction(LoadMod));
		L.RegFunction("GetAllPath", new LuaCSFunction(GetAllPath));
		L.RegFunction("LoadFile", new LuaCSFunction(LoadFile));
		L.RegFunction("LoadModList", new LuaCSFunction(LoadModList));
		L.RegFunction("SaveModList", new LuaCSFunction(SaveModList));
		L.RegFunction("InitMods", new LuaCSFunction(InitMods));
		L.RegFunction("New", new LuaCSFunction(_CreateSango_Mod_ModManager));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("MOD_ROOT_DIR", new LuaCSFunction(get_MOD_ROOT_DIR), new LuaCSFunction(set_MOD_ROOT_DIR));
		L.RegVar("DEFAULT_MODS", new LuaCSFunction(get_DEFAULT_MODS), new LuaCSFunction(set_DEFAULT_MODS));
		L.RegVar("mModList", new LuaCSFunction(get_mModList), new LuaCSFunction(set_mModList));
		L.RegVar("mModMap", new LuaCSFunction(get_mModMap), new LuaCSFunction(set_mModMap));
		L.RegVar("EditModName", new LuaCSFunction(get_EditModName), new LuaCSFunction(set_EditModName));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSango_Mod_ModManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Sango.Mod.ModManager obj = new Sango.Mod.ModManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Sango.Mod.ModManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnabledMods(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Mod.ModManager obj = (Sango.Mod.ModManager)ToLua.CheckObject<Sango.Mod.ModManager>(L, 1);
			Sango.Mod.Mod[] o = obj.GetEnabledMods();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Mod.ModManager obj = (Sango.Mod.ModManager)ToLua.CheckObject<Sango.Mod.ModManager>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadMod(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Mod.ModManager obj = (Sango.Mod.ModManager)ToLua.CheckObject<Sango.Mod.ModManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			Sango.Mod.Mod o = obj.LoadMod(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Mod.ModManager obj = (Sango.Mod.ModManager)ToLua.CheckObject<Sango.Mod.ModManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string[] o = obj.GetAllPath(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Mod.ModManager obj = (Sango.Mod.ModManager)ToLua.CheckObject<Sango.Mod.ModManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<string> arg1 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 3);
			obj.LoadFile(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadModList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Mod.ModManager obj = (Sango.Mod.ModManager)ToLua.CheckObject<Sango.Mod.ModManager>(L, 1);
			string[] o = obj.LoadModList();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveModList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Mod.ModManager obj = (Sango.Mod.ModManager)ToLua.CheckObject<Sango.Mod.ModManager>(L, 1);
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			obj.SaveModList(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitMods(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Sango.Mod.ModManager obj = (Sango.Mod.ModManager)ToLua.CheckObject<Sango.Mod.ModManager>(L, 1);
				obj.InitMods();
				return 0;
			}
			else if (count == 2)
			{
				Sango.Mod.ModManager obj = (Sango.Mod.ModManager)ToLua.CheckObject<Sango.Mod.ModManager>(L, 1);
				string[] arg0 = ToLua.CheckStringArray(L, 2);
				obj.InitMods(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Mod.ModManager.InitMods");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MOD_ROOT_DIR(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Sango.Mod.ModManager.MOD_ROOT_DIR);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DEFAULT_MODS(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Sango.Mod.ModManager.DEFAULT_MODS);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mModList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Mod.ModManager obj = (Sango.Mod.ModManager)o;
			System.Collections.Generic.List<Sango.Mod.Mod> ret = obj.mModList;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mModList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mModMap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Mod.ModManager obj = (Sango.Mod.ModManager)o;
			System.Collections.Generic.Dictionary<string,Sango.Mod.Mod> ret = obj.mModMap;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mModMap on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EditModName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Sango.Mod.ModManager.EditModName);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MOD_ROOT_DIR(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			Sango.Mod.ModManager.MOD_ROOT_DIR = arg0;
			Sango.Mod.ModManager.MOD_ROOT_DIR = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DEFAULT_MODS(IntPtr L)
	{
		try
		{
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			Sango.Mod.ModManager.DEFAULT_MODS = arg0;
			Sango.Mod.ModManager.DEFAULT_MODS = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mModList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Mod.ModManager obj = (Sango.Mod.ModManager)o;
			System.Collections.Generic.List<Sango.Mod.Mod> arg0 = (System.Collections.Generic.List<Sango.Mod.Mod>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.List<Sango.Mod.Mod>>.type);
			obj.mModList = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mModList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mModMap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Mod.ModManager obj = (Sango.Mod.ModManager)o;
			System.Collections.Generic.Dictionary<string,Sango.Mod.Mod> arg0 = (System.Collections.Generic.Dictionary<string,Sango.Mod.Mod>)ToLua.CheckObject(L, 2, TypeTraits<System.Collections.Generic.Dictionary<string,Sango.Mod.Mod>>.type);
			obj.mModMap = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mModMap on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EditModName(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			Sango.Mod.ModManager.EditModName = arg0;
			Sango.Mod.ModManager.EditModName = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

