//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_Tools_MapEditorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Sango.Tools.MapEditor), typeof(Sango.Behaviour));
		L.RegFunction("CreateEmptyMap", new LuaCSFunction(CreateEmptyMap));
		L.RegFunction("SelectionChangedHandler", new LuaCSFunction(SelectionChangedHandler));
		L.RegFunction("SetModelSelectionMod", new LuaCSFunction(SetModelSelectionMod));
		L.RegFunction("SetCameraControlType", new LuaCSFunction(SetCameraControlType));
		L.RegFunction("QueryHeight", new LuaCSFunction(QueryHeight));
		L.RegFunction("Update", new LuaCSFunction(Update));
		L.RegFunction("ForceCameraToGameObject", new LuaCSFunction(ForceCameraToGameObject));
		L.RegFunction("ForceCameraToPosition", new LuaCSFunction(ForceCameraToPosition));
		L.RegFunction("FindTexture", new LuaCSFunction(FindTexture));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("map", new LuaCSFunction(get_map), new LuaCSFunction(set_map));
		L.RegVar("IsEditOn", new LuaCSFunction(get_IsEditOn), new LuaCSFunction(set_IsEditOn));
		L.RegVar("WorkContent", new LuaCSFunction(get_WorkContent), new LuaCSFunction(set_WorkContent));
		L.RegVar("DefaultContentName", new LuaCSFunction(get_DefaultContentName), null);
		L.RegVar("vertexMapData", new LuaCSFunction(get_vertexMapData), null);
		L.RegVar("mapData", new LuaCSFunction(get_mapData), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateEmptyMap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Tools.MapEditor obj = (Sango.Tools.MapEditor)ToLua.CheckObject<Sango.Tools.MapEditor>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			Sango.Render.MapRender o = obj.CreateEmptyMap(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SelectionChangedHandler(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Tools.MapEditor obj = (Sango.Tools.MapEditor)ToLua.CheckObject<Sango.Tools.MapEditor>(L, 1);
			RTEditor.ObjectSelectionChangedEventArgs arg0 = (RTEditor.ObjectSelectionChangedEventArgs)ToLua.CheckObject<RTEditor.ObjectSelectionChangedEventArgs>(L, 2);
			obj.SelectionChangedHandler(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetModelSelectionMod(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Tools.MapEditor obj = (Sango.Tools.MapEditor)ToLua.CheckObject<Sango.Tools.MapEditor>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetModelSelectionMod(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCameraControlType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Tools.MapEditor obj = (Sango.Tools.MapEditor)ToLua.CheckObject<Sango.Tools.MapEditor>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.SetCameraControlType(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int QueryHeight(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				float o = Sango.Tools.MapEditor.QueryHeight(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				float arg1;
				bool o = Sango.Tools.MapEditor.QueryHeight(arg0, out arg1);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushnumber(L, arg1);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Tools.MapEditor.QueryHeight");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Tools.MapEditor obj = (Sango.Tools.MapEditor)ToLua.CheckObject<Sango.Tools.MapEditor>(L, 1);
			obj.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForceCameraToGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Tools.MapEditor obj = (Sango.Tools.MapEditor)ToLua.CheckObject<Sango.Tools.MapEditor>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject<UnityEngine.GameObject>(L, 2);
			obj.ForceCameraToGameObject(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForceCameraToPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Tools.MapEditor obj = (Sango.Tools.MapEditor)ToLua.CheckObject<Sango.Tools.MapEditor>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.ForceCameraToPosition(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindTexture(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Sango.Tools.MapEditor obj = (Sango.Tools.MapEditor)ToLua.CheckObject<Sango.Tools.MapEditor>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string o = obj.FindTexture(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Sango.Tools.MapEditor obj = (Sango.Tools.MapEditor)ToLua.CheckObject<Sango.Tools.MapEditor>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string o = obj.FindTexture(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Tools.MapEditor.FindTexture");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_map(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.MapEditor obj = (Sango.Tools.MapEditor)o;
			Sango.Render.MapRender ret = obj.map;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index map on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsEditOn(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, Sango.Tools.MapEditor.IsEditOn);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WorkContent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.MapEditor obj = (Sango.Tools.MapEditor)o;
			string ret = obj.WorkContent;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index WorkContent on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DefaultContentName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.MapEditor obj = (Sango.Tools.MapEditor)o;
			string ret = obj.DefaultContentName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DefaultContentName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_vertexMapData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.MapEditor obj = (Sango.Tools.MapEditor)o;
			Sango.Render.MapData.VertexData[][] ret = obj.vertexMapData;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index vertexMapData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mapData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.MapEditor obj = (Sango.Tools.MapEditor)o;
			Sango.Render.MapData ret = obj.mapData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mapData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_map(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.MapEditor obj = (Sango.Tools.MapEditor)o;
			Sango.Render.MapRender arg0 = (Sango.Render.MapRender)ToLua.CheckObject<Sango.Render.MapRender>(L, 2);
			obj.map = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index map on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsEditOn(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			Sango.Tools.MapEditor.IsEditOn = arg0;
			Sango.Tools.MapEditor.IsEditOn = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WorkContent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Tools.MapEditor obj = (Sango.Tools.MapEditor)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.WorkContent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index WorkContent on a nil value");
		}
	}
}

