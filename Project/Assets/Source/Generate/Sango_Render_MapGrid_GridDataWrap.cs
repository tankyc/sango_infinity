//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_Render_MapGrid_GridDataWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Sango.Render.MapGrid.GridData), typeof(System.Object));
		L.RegFunction("OnLoad", new LuaCSFunction(OnLoad));
		L.RegFunction("OnSave", new LuaCSFunction(OnSave));
		L.RegFunction("New", new LuaCSFunction(_CreateSango_Render_MapGrid_GridData));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("terrainType", new LuaCSFunction(get_terrainType), new LuaCSFunction(set_terrainType));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSango_Render_MapGrid_GridData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Sango.Render.MapGrid.GridData obj = new Sango.Render.MapGrid.GridData();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Sango.Render.MapGrid.GridData.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnLoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Render.MapGrid.GridData obj = (Sango.Render.MapGrid.GridData)ToLua.CheckObject<Sango.Render.MapGrid.GridData>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			System.IO.BinaryReader arg1 = (System.IO.BinaryReader)ToLua.CheckObject<System.IO.BinaryReader>(L, 3);
			obj.OnLoad(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSave(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Render.MapGrid.GridData obj = (Sango.Render.MapGrid.GridData)ToLua.CheckObject<Sango.Render.MapGrid.GridData>(L, 1);
			System.IO.BinaryWriter arg0 = (System.IO.BinaryWriter)ToLua.CheckObject<System.IO.BinaryWriter>(L, 2);
			obj.OnSave(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_terrainType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapGrid.GridData obj = (Sango.Render.MapGrid.GridData)o;
			byte ret = obj.terrainType;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index terrainType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_terrainType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapGrid.GridData obj = (Sango.Render.MapGrid.GridData)o;
			byte arg0 = (byte)LuaDLL.luaL_checkinteger(L, 2);
			obj.terrainType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index terrainType on a nil value");
		}
	}
}

