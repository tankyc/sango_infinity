//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_IO_FileStreamWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.IO.FileStream), typeof(System.IO.Stream));
		L.RegFunction("ReadByte", new LuaCSFunction(ReadByte));
		L.RegFunction("WriteByte", new LuaCSFunction(WriteByte));
		L.RegFunction("Read", new LuaCSFunction(Read));
		L.RegFunction("BeginRead", new LuaCSFunction(BeginRead));
		L.RegFunction("EndRead", new LuaCSFunction(EndRead));
		L.RegFunction("Write", new LuaCSFunction(Write));
		L.RegFunction("BeginWrite", new LuaCSFunction(BeginWrite));
		L.RegFunction("EndWrite", new LuaCSFunction(EndWrite));
		L.RegFunction("Seek", new LuaCSFunction(Seek));
		L.RegFunction("SetLength", new LuaCSFunction(SetLength));
		L.RegFunction("Flush", new LuaCSFunction(Flush));
		L.RegFunction("Lock", new LuaCSFunction(Lock));
		L.RegFunction("Unlock", new LuaCSFunction(Unlock));
		L.RegFunction("GetAccessControl", new LuaCSFunction(GetAccessControl));
		L.RegFunction("SetAccessControl", new LuaCSFunction(SetAccessControl));
		L.RegFunction("FlushAsync", new LuaCSFunction(FlushAsync));
		L.RegFunction("ReadAsync", new LuaCSFunction(ReadAsync));
		L.RegFunction("WriteAsync", new LuaCSFunction(WriteAsync));
		L.RegFunction("New", new LuaCSFunction(_CreateSystem_IO_FileStream));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("CanRead", new LuaCSFunction(get_CanRead), null);
		L.RegVar("CanWrite", new LuaCSFunction(get_CanWrite), null);
		L.RegVar("CanSeek", new LuaCSFunction(get_CanSeek), null);
		L.RegVar("IsAsync", new LuaCSFunction(get_IsAsync), null);
		L.RegVar("Name", new LuaCSFunction(get_Name), null);
		L.RegVar("Length", new LuaCSFunction(get_Length), null);
		L.RegVar("Position", new LuaCSFunction(get_Position), new LuaCSFunction(set_Position));
		L.RegVar("SafeFileHandle", new LuaCSFunction(get_SafeFileHandle), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_IO_FileStream(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string, System.IO.FileMode>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IO.FileMode arg1 = (System.IO.FileMode)ToLua.ToObject(L, 2);
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Microsoft.Win32.SafeHandles.SafeFileHandle, System.IO.FileAccess>(L, 1))
			{
				Microsoft.Win32.SafeHandles.SafeFileHandle arg0 = (Microsoft.Win32.SafeHandles.SafeFileHandle)ToLua.ToObject(L, 1);
				System.IO.FileAccess arg1 = (System.IO.FileAccess)ToLua.ToObject(L, 2);
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<Microsoft.Win32.SafeHandles.SafeFileHandle, System.IO.FileAccess, int>(L, 1))
			{
				Microsoft.Win32.SafeHandles.SafeFileHandle arg0 = (Microsoft.Win32.SafeHandles.SafeFileHandle)ToLua.ToObject(L, 1);
				System.IO.FileAccess arg1 = (System.IO.FileAccess)ToLua.ToObject(L, 2);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 3);
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, System.IO.FileMode, System.IO.FileAccess>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IO.FileMode arg1 = (System.IO.FileMode)ToLua.ToObject(L, 2);
				System.IO.FileAccess arg2 = (System.IO.FileAccess)ToLua.ToObject(L, 3);
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<Microsoft.Win32.SafeHandles.SafeFileHandle, System.IO.FileAccess, int, bool>(L, 1))
			{
				Microsoft.Win32.SafeHandles.SafeFileHandle arg0 = (Microsoft.Win32.SafeHandles.SafeFileHandle)ToLua.ToObject(L, 1);
				System.IO.FileAccess arg1 = (System.IO.FileAccess)ToLua.ToObject(L, 2);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 3);
				bool arg3 = LuaDLL.lua_toboolean(L, 4);
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IO.FileMode arg1 = (System.IO.FileMode)ToLua.ToObject(L, 2);
				System.IO.FileAccess arg2 = (System.IO.FileAccess)ToLua.ToObject(L, 3);
				System.IO.FileShare arg3 = (System.IO.FileShare)ToLua.ToObject(L, 4);
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 5)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.IO.FileMode arg1 = (System.IO.FileMode)ToLua.CheckObject(L, 2, TypeTraits<System.IO.FileMode>.type);
				System.IO.FileAccess arg2 = (System.IO.FileAccess)ToLua.CheckObject(L, 3, TypeTraits<System.IO.FileAccess>.type);
				System.IO.FileShare arg3 = (System.IO.FileShare)ToLua.CheckObject(L, 4, TypeTraits<System.IO.FileShare>.type);
				int arg4 = (int)LuaDLL.luaL_checkinteger(L, 5);
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<System.IO.FileAccess, System.IO.FileShare, int, bool>(L, 3))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.IO.FileMode arg1 = (System.IO.FileMode)ToLua.CheckObject(L, 2, TypeTraits<System.IO.FileMode>.type);
				System.IO.FileAccess arg2 = (System.IO.FileAccess)ToLua.ToObject(L, 3);
				System.IO.FileShare arg3 = (System.IO.FileShare)ToLua.ToObject(L, 4);
				int arg4 = (int)LuaDLL.lua_tointeger(L, 5);
				bool arg5 = LuaDLL.lua_toboolean(L, 6);
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<System.IO.FileAccess, System.IO.FileShare, int, System.IO.FileOptions>(L, 3))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.IO.FileMode arg1 = (System.IO.FileMode)ToLua.CheckObject(L, 2, TypeTraits<System.IO.FileMode>.type);
				System.IO.FileAccess arg2 = (System.IO.FileAccess)ToLua.ToObject(L, 3);
				System.IO.FileShare arg3 = (System.IO.FileShare)ToLua.ToObject(L, 4);
				int arg4 = (int)LuaDLL.lua_tointeger(L, 5);
				System.IO.FileOptions arg5 = (System.IO.FileOptions)ToLua.ToObject(L, 6);
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<System.Security.AccessControl.FileSystemRights, System.IO.FileShare, int, System.IO.FileOptions>(L, 3))
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.IO.FileMode arg1 = (System.IO.FileMode)ToLua.CheckObject(L, 2, TypeTraits<System.IO.FileMode>.type);
				System.Security.AccessControl.FileSystemRights arg2 = (System.Security.AccessControl.FileSystemRights)ToLua.ToObject(L, 3);
				System.IO.FileShare arg3 = (System.IO.FileShare)ToLua.ToObject(L, 4);
				int arg4 = (int)LuaDLL.lua_tointeger(L, 5);
				System.IO.FileOptions arg5 = (System.IO.FileOptions)ToLua.ToObject(L, 6);
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 7)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.IO.FileMode arg1 = (System.IO.FileMode)ToLua.CheckObject(L, 2, TypeTraits<System.IO.FileMode>.type);
				System.Security.AccessControl.FileSystemRights arg2 = (System.Security.AccessControl.FileSystemRights)ToLua.CheckObject(L, 3, TypeTraits<System.Security.AccessControl.FileSystemRights>.type);
				System.IO.FileShare arg3 = (System.IO.FileShare)ToLua.CheckObject(L, 4, TypeTraits<System.IO.FileShare>.type);
				int arg4 = (int)LuaDLL.luaL_checkinteger(L, 5);
				System.IO.FileOptions arg5 = (System.IO.FileOptions)ToLua.CheckObject(L, 6, TypeTraits<System.IO.FileOptions>.type);
				System.Security.AccessControl.FileSecurity arg6 = (System.Security.AccessControl.FileSecurity)ToLua.CheckObject<System.Security.AccessControl.FileSecurity>(L, 7);
				System.IO.FileStream obj = new System.IO.FileStream(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: System.IO.FileStream.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
			int o = obj.ReadByte();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
			byte arg0 = (byte)LuaDLL.luaL_checkinteger(L, 2);
			obj.WriteByte(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Read(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
			int o = obj.Read(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginRead(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
			System.AsyncCallback arg3 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 5);
			object arg4 = ToLua.ToVarObject(L, 6);
			System.IAsyncResult o = obj.BeginRead(arg0, arg1, arg2, arg3, arg4);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndRead(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
			int o = obj.EndRead(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Write(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
			obj.Write(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginWrite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
			System.AsyncCallback arg3 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 5);
			object arg4 = ToLua.ToVarObject(L, 6);
			System.IAsyncResult o = obj.BeginWrite(arg0, arg1, arg2, arg3, arg4);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndWrite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
			obj.EndWrite(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Seek(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			System.IO.SeekOrigin arg1 = (System.IO.SeekOrigin)ToLua.CheckObject(L, 3, TypeTraits<System.IO.SeekOrigin>.type);
			long o = obj.Seek(arg0, arg1);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.SetLength(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Flush(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
				obj.Flush();
				return 0;
			}
			else if (count == 2)
			{
				System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.Flush(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.IO.FileStream.Flush");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			long arg1 = LuaDLL.tolua_checkint64(L, 3);
			obj.Lock(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unlock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			long arg1 = LuaDLL.tolua_checkint64(L, 3);
			obj.Unlock(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAccessControl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
			System.Security.AccessControl.FileSecurity o = obj.GetAccessControl();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAccessControl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
			System.Security.AccessControl.FileSecurity arg0 = (System.Security.AccessControl.FileSecurity)ToLua.CheckObject<System.Security.AccessControl.FileSecurity>(L, 2);
			obj.SetAccessControl(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FlushAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
				System.Threading.Tasks.Task o = obj.FlushAsync();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
				System.Threading.CancellationToken arg0 = StackTraits<System.Threading.CancellationToken>.Check(L, 2);
				System.Threading.Tasks.Task o = obj.FlushAsync(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.IO.FileStream.FlushAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
				System.Memory<byte> arg0 = StackTraits<System.Memory<byte>>.Check(L, 2);
				System.Threading.Tasks.ValueTask<int> o = obj.ReadAsync(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
				System.Memory<byte> arg0 = StackTraits<System.Memory<byte>>.Check(L, 2);
				System.Threading.CancellationToken arg1 = StackTraits<System.Threading.CancellationToken>.Check(L, 3);
				System.Threading.Tasks.ValueTask<int> o = obj.ReadAsync(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				System.Threading.Tasks.Task<int> o = obj.ReadAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				System.Threading.CancellationToken arg3 = StackTraits<System.Threading.CancellationToken>.Check(L, 5);
				System.Threading.Tasks.Task<int> o = obj.ReadAsync(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.IO.FileStream.ReadAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
				System.ReadOnlyMemory<byte> arg0 = StackTraits<System.ReadOnlyMemory<byte>>.Check(L, 2);
				System.Threading.Tasks.ValueTask o = obj.WriteAsync(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
				System.ReadOnlyMemory<byte> arg0 = StackTraits<System.ReadOnlyMemory<byte>>.Check(L, 2);
				System.Threading.CancellationToken arg1 = StackTraits<System.Threading.CancellationToken>.Check(L, 3);
				System.Threading.Tasks.ValueTask o = obj.WriteAsync(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				System.Threading.Tasks.Task o = obj.WriteAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				System.IO.FileStream obj = (System.IO.FileStream)ToLua.CheckObject<System.IO.FileStream>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				System.Threading.CancellationToken arg3 = StackTraits<System.Threading.CancellationToken>.Check(L, 5);
				System.Threading.Tasks.Task o = obj.WriteAsync(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.IO.FileStream.WriteAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanRead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)o;
			bool ret = obj.CanRead;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanRead on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanWrite(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)o;
			bool ret = obj.CanWrite;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanWrite on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanSeek(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)o;
			bool ret = obj.CanSeek;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanSeek on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsAsync(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)o;
			bool ret = obj.IsAsync;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsAsync on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)o;
			string ret = obj.Name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Length(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)o;
			long ret = obj.Length;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Length on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)o;
			long ret = obj.Position;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SafeFileHandle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)o;
			Microsoft.Win32.SafeHandles.SafeFileHandle ret = obj.SafeFileHandle;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SafeFileHandle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.FileStream obj = (System.IO.FileStream)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.Position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Position on a nil value");
		}
	}
}

