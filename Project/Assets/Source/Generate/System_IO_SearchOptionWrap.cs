//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_IO_SearchOptionWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(System.IO.SearchOption));
		L.RegVar("TopDirectoryOnly", new LuaCSFunction(get_TopDirectoryOnly), null);
		L.RegVar("AllDirectories", new LuaCSFunction(get_AllDirectories), null);
		L.RegFunction("IntToEnum", new LuaCSFunction(IntToEnum));
		L.EndEnum();
		TypeTraits<System.IO.SearchOption>.Check = CheckType;
		StackTraits<System.IO.SearchOption>.Push = Push;
	}

	static void Push(IntPtr L, System.IO.SearchOption arg)
	{
		ToLua.Push(L, arg);
	}

	static Type TypeOf_System_IO_SearchOption = typeof(System.IO.SearchOption);

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(TypeOf_System_IO_SearchOption, L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TopDirectoryOnly(IntPtr L)
	{
		ToLua.Push(L, System.IO.SearchOption.TopDirectoryOnly);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AllDirectories(IntPtr L)
	{
		ToLua.Push(L, System.IO.SearchOption.AllDirectories);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
		System.IO.SearchOption o = (System.IO.SearchOption)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

