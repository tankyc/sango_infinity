//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_Tools_EditorUtilityWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("EditorUtility");
		L.RegFunction("Vector3Field", new LuaCSFunction(Vector3Field));
		L.RegFunction("Vector2Field", new LuaCSFunction(Vector2Field));
		L.RegFunction("TextField", new LuaCSFunction(TextField));
		L.RegFunction("FloatField", new LuaCSFunction(FloatField));
		L.RegFunction("IntField", new LuaCSFunction(IntField));
		L.RegFunction("ULongField", new LuaCSFunction(ULongField));
		L.RegFunction("CreateTex", new LuaCSFunction(CreateTex));
		L.RegFunction("CreateImgTextContent", new LuaCSFunction(CreateImgTextContent));
		L.RegFunction("ColorField", new LuaCSFunction(ColorField));
		L.RegFunction("OpenTexture", new LuaCSFunction(OpenTexture));
		L.RegFunction("Popup", new LuaCSFunction(Popup));
		L.RegVar("lastOpenFilePath", new LuaCSFunction(get_lastOpenFilePath), new LuaCSFunction(set_lastOpenFilePath));
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Vector3Field(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				UnityEngine.Vector3 o = Sango.Tools.EditorUtility.Vector3Field(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 o = Sango.Tools.EditorUtility.Vector3Field(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Tools.EditorUtility.Vector3Field");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Vector2Field(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 o = Sango.Tools.EditorUtility.Vector2Field(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Vector2 o = Sango.Tools.EditorUtility.Vector2Field(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 3);
				UnityEngine.Vector2 o = Sango.Tools.EditorUtility.Vector2Field(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.Check(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				int arg3 = (int)LuaDLL.luaL_checkinteger(L, 4);
				UnityEngine.Vector2 o = Sango.Tools.EditorUtility.Vector2Field(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Tools.EditorUtility.Vector2Field");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TextField(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, string, int>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 3);
				string o = Sango.Tools.EditorUtility.TextField(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, string, int, int>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 3);
				int arg3 = (int)LuaDLL.lua_tointeger(L, 4);
				string o = Sango.Tools.EditorUtility.TextField(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<string, string>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.GUILayoutOption>(L, 3, count - 2))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				UnityEngine.GUILayoutOption[] arg2 = ToLua.ToParamsObject<UnityEngine.GUILayoutOption>(L, 3, count - 2);
				string o = Sango.Tools.EditorUtility.TextField(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Tools.EditorUtility.TextField");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FloatField(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				float o = Sango.Tools.EditorUtility.FloatField(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<float, string>(L, 1))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				float o = Sango.Tools.EditorUtility.FloatField(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Rect, float>(L, 1))
			{
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.To(L, 1);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
				float o = Sango.Tools.EditorUtility.FloatField(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<float>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.GUILayoutOption>(L, 2, count - 1))
			{
				float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
				UnityEngine.GUILayoutOption[] arg1 = ToLua.ToParamsObject<UnityEngine.GUILayoutOption>(L, 2, count - 1);
				float o = Sango.Tools.EditorUtility.FloatField(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Tools.EditorUtility.FloatField");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntField(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int, string>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				int o = Sango.Tools.EditorUtility.IntField(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, string, int>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 3);
				int o = Sango.Tools.EditorUtility.IntField(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<int, string>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.GUILayoutOption>(L, 3, count - 2))
			{
				int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				UnityEngine.GUILayoutOption[] arg2 = ToLua.ToParamsObject<UnityEngine.GUILayoutOption>(L, 3, count - 2);
				int o = Sango.Tools.EditorUtility.IntField(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<int>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.GUILayoutOption>(L, 2, count - 1))
			{
				int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
				UnityEngine.GUILayoutOption[] arg1 = ToLua.ToParamsObject<UnityEngine.GUILayoutOption>(L, 2, count - 1);
				int o = Sango.Tools.EditorUtility.IntField(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Tools.EditorUtility.IntField");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ULongField(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<ulong, string>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				ulong o = Sango.Tools.EditorUtility.ULongField(arg0, arg1);
				LuaDLL.tolua_pushuint64(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<ulong, string, int>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				int arg2 = (int)LuaDLL.lua_tointeger(L, 3);
				ulong o = Sango.Tools.EditorUtility.ULongField(arg0, arg1, arg2);
				LuaDLL.tolua_pushuint64(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<ulong, string>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.GUILayoutOption>(L, 3, count - 2))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				UnityEngine.GUILayoutOption[] arg2 = ToLua.ToParamsObject<UnityEngine.GUILayoutOption>(L, 3, count - 2);
				ulong o = Sango.Tools.EditorUtility.ULongField(arg0, arg1, arg2);
				LuaDLL.tolua_pushuint64(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<ulong>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.GUILayoutOption>(L, 2, count - 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				UnityEngine.GUILayoutOption[] arg1 = ToLua.ToParamsObject<UnityEngine.GUILayoutOption>(L, 2, count - 1);
				ulong o = Sango.Tools.EditorUtility.ULongField(arg0, arg1);
				LuaDLL.tolua_pushuint64(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Tools.EditorUtility.ULongField");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateTex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 2);
			UnityEngine.Texture2D o = Sango.Tools.EditorUtility.CreateTex(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateImgTextContent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Color arg1 = ToLua.ToColor(L, 2);
				UnityEngine.Texture2D arg2 = (UnityEngine.Texture2D)ToLua.CheckObject<UnityEngine.Texture2D>(L, 3);
				UnityEngine.GUIContent o = Sango.Tools.EditorUtility.CreateImgTextContent(arg0, arg1, ref arg2);
				ToLua.PushObject(L, o);
				ToLua.PushSealed(L, arg2);
				return 2;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Color arg1 = ToLua.ToColor(L, 2);
				UnityEngine.Texture2D arg2 = (UnityEngine.Texture2D)ToLua.CheckObject<UnityEngine.Texture2D>(L, 3);
				int arg3 = (int)LuaDLL.luaL_checkinteger(L, 4);
				UnityEngine.GUIContent o = Sango.Tools.EditorUtility.CreateImgTextContent(arg0, arg1, ref arg2, arg3);
				ToLua.PushObject(L, o);
				ToLua.PushSealed(L, arg2);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Tools.EditorUtility.CreateImgTextContent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ColorField(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			UnityEngine.Events.UnityAction<UnityEngine.Color> arg2 = (UnityEngine.Events.UnityAction<UnityEngine.Color>)ToLua.CheckDelegate<UnityEngine.Events.UnityAction<UnityEngine.Color>>(L, 3);
			Sango.Tools.EditorUtility.ColorField(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			object arg1 = ToLua.ToVarObject(L, 2);
			System.Action<string,UnityEngine.Object,object> arg2 = (System.Action<string,UnityEngine.Object,object>)ToLua.CheckDelegate<System.Action<string,UnityEngine.Object,object>>(L, 3);
			Sango.Tools.EditorUtility.OpenTexture(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Popup(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<string, int, string[], int>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 2);
				string[] arg2 = ToLua.ToStringArray(L, 3);
				int arg3 = (int)LuaDLL.lua_tointeger(L, 4);
				int o = Sango.Tools.EditorUtility.Popup(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<int, string[]>(L, 1) && TypeChecker.CheckParamsType<UnityEngine.GUILayoutOption>(L, 3, count - 2))
			{
				int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
				string[] arg1 = ToLua.ToStringArray(L, 2);
				UnityEngine.GUILayoutOption[] arg2 = ToLua.ToParamsObject<UnityEngine.GUILayoutOption>(L, 3, count - 2);
				int o = Sango.Tools.EditorUtility.Popup(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Tools.EditorUtility.Popup");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lastOpenFilePath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Sango.Tools.EditorUtility.lastOpenFilePath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lastOpenFilePath(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			Sango.Tools.EditorUtility.lastOpenFilePath = arg0;
			Sango.Tools.EditorUtility.lastOpenFilePath = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

