//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_Render_MapDataWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Sango.Render.MapData), typeof(Sango.Render.MapProperty));
		L.RegFunction("Init", new LuaCSFunction(Init));
		L.RegFunction("Clear", new LuaCSFunction(Clear));
		L.RegFunction("color_is_layer", new LuaCSFunction(color_is_layer));
		L.RegFunction("get_layer_color", new LuaCSFunction(get_layer_color));
		L.RegFunction("LoadFromBMP", new LuaCSFunction(LoadFromBMP));
		L.RegFunction("LoadHeight", new LuaCSFunction(LoadHeight));
		L.RegFunction("SaveHeight", new LuaCSFunction(SaveHeight));
		L.RegFunction("LoadLayer", new LuaCSFunction(LoadLayer));
		L.RegFunction("SaveLayer", new LuaCSFunction(SaveLayer));
		L.RegFunction("LoadWater", new LuaCSFunction(LoadWater));
		L.RegFunction("SaveWater", new LuaCSFunction(SaveWater));
		L.RegFunction("Create", new LuaCSFunction(Create));
		L.RegFunction("VertexUV", new LuaCSFunction(VertexUV));
		L.RegFunction("VertexPosition", new LuaCSFunction(VertexPosition));
		L.RegFunction("VertexWaterPosition", new LuaCSFunction(VertexWaterPosition));
		L.RegFunction("VertexNormal", new LuaCSFunction(VertexNormal));
		L.RegFunction("UpdateRender", new LuaCSFunction(UpdateRender));
		L.RegFunction("GetHeight", new LuaCSFunction(GetHeight));
		L.RegFunction("GetVertexData", new LuaCSFunction(GetVertexData));
		L.RegFunction("GetWorldHeight", new LuaCSFunction(GetWorldHeight));
		L.RegFunction("GetWorldWaterHeight", new LuaCSFunction(GetWorldWaterHeight));
		L.RegFunction("New", new LuaCSFunction(_CreateSango_Render_MapData));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("NeighborVertex", new LuaCSFunction(get_NeighborVertex), new LuaCSFunction(set_NeighborVertex));
		L.RegVar("quadSize", new LuaCSFunction(get_quadSize), new LuaCSFunction(set_quadSize));
		L.RegVar("vertexDatas", new LuaCSFunction(get_vertexDatas), new LuaCSFunction(set_vertexDatas));
		L.RegVar("bin_path", new LuaCSFunction(get_bin_path), new LuaCSFunction(set_bin_path));
		L.RegVar("color_map", new LuaCSFunction(get_color_map), new LuaCSFunction(set_color_map));
		L.RegVar("vertex_width", new LuaCSFunction(get_vertex_width), null);
		L.RegVar("vertex_height", new LuaCSFunction(get_vertex_height), null);
		L.RegVar("wrold_width", new LuaCSFunction(get_wrold_width), null);
		L.RegVar("wrold_height", new LuaCSFunction(get_wrold_height), null);
		L.RegVar("bounds", new LuaCSFunction(get_bounds), new LuaCSFunction(set_bounds));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSango_Render_MapData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Sango.Render.MapRender arg0 = (Sango.Render.MapRender)ToLua.CheckObject<Sango.Render.MapRender>(L, 1);
				Sango.Render.MapData obj = new Sango.Render.MapData(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Sango.Render.MapData.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int color_is_layer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 2);
			int arg2 = (int)LuaDLL.luaL_checkinteger(L, 3);
			byte o = Sango.Render.MapData.color_is_layer(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_layer_color(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
			UnityEngine.Color32 o = Sango.Render.MapData.get_layer_color(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadFromBMP(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			string arg3 = ToLua.CheckString(L, 5);
			string arg4 = ToLua.CheckString(L, 6);
			obj.LoadFromBMP(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadHeight(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
				obj.LoadHeight();
				return 0;
			}
			else if (count == 2)
			{
				Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadHeight(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Render.MapData.LoadHeight");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveHeight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SaveHeight(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadLayer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
				obj.LoadLayer();
				return 0;
			}
			else if (count == 2)
			{
				Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadLayer(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Render.MapData.LoadLayer");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveLayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SaveLayer(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadWater(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
				obj.LoadWater();
				return 0;
			}
			else if (count == 2)
			{
				Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadWater(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Render.MapData.LoadWater");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveWater(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SaveWater(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Create(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				obj.Create(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				byte arg2 = (byte)LuaDLL.luaL_checkinteger(L, 4);
				obj.Create(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Render.MapData.Create");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int VertexUV(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
			Sango.Render.MapData.VertexData arg0 = StackTraits<Sango.Render.MapData.VertexData>.Check(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
			UnityEngine.Vector2 o = obj.VertexUV(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int VertexPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
			Sango.Render.MapData.VertexData arg0 = StackTraits<Sango.Render.MapData.VertexData>.Check(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
			UnityEngine.Vector3 o = obj.VertexPosition(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int VertexWaterPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
			Sango.Render.MapData.VertexData arg0 = StackTraits<Sango.Render.MapData.VertexData>.Check(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
			UnityEngine.Vector3 o = obj.VertexWaterPosition(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int VertexNormal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
			Sango.Render.MapData.VertexData arg0 = StackTraits<Sango.Render.MapData.VertexData>.Check(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
			UnityEngine.Vector3 o = obj.VertexNormal(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateRender(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
			obj.UpdateRender();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHeight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			float o = obj.GetHeight(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVertexData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			Sango.Render.MapData.VertexData o = obj.GetVertexData(arg0, arg1);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWorldHeight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			float o = obj.GetWorldHeight(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWorldWaterHeight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Render.MapData obj = (Sango.Render.MapData)ToLua.CheckObject<Sango.Render.MapData>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			float o = obj.GetWorldWaterHeight(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NeighborVertex(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Sango.Render.MapData.NeighborVertex);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_quadSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapData obj = (Sango.Render.MapData)o;
			int ret = obj.quadSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index quadSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_vertexDatas(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapData obj = (Sango.Render.MapData)o;
			Sango.Render.MapData.VertexData[][] ret = obj.vertexDatas;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index vertexDatas on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bin_path(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapData obj = (Sango.Render.MapData)o;
			string ret = obj.bin_path;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bin_path on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_color_map(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Sango.Render.MapData.color_map);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_vertex_width(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapData obj = (Sango.Render.MapData)o;
			int ret = obj.vertex_width;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index vertex_width on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_vertex_height(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapData obj = (Sango.Render.MapData)o;
			int ret = obj.vertex_height;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index vertex_height on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_wrold_width(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapData obj = (Sango.Render.MapData)o;
			int ret = obj.wrold_width;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index wrold_width on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_wrold_height(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapData obj = (Sango.Render.MapData)o;
			int ret = obj.wrold_height;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index wrold_height on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bounds(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapData obj = (Sango.Render.MapData)o;
			UnityEngine.Vector2Int ret = obj.bounds;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bounds on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NeighborVertex(IntPtr L)
	{
		try
		{
			UnityEngine.Vector2Int[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector2Int>(L, 2);
			Sango.Render.MapData.NeighborVertex = arg0;
			Sango.Render.MapData.NeighborVertex = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_quadSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapData obj = (Sango.Render.MapData)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.quadSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index quadSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_vertexDatas(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapData obj = (Sango.Render.MapData)o;
			Sango.Render.MapData.VertexData[][] arg0 = ToLua.CheckObjectArray<Sango.Render.MapData.VertexData[]>(L, 2);
			obj.vertexDatas = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index vertexDatas on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bin_path(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapData obj = (Sango.Render.MapData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.bin_path = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bin_path on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_color_map(IntPtr L)
	{
		try
		{
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
			Sango.Render.MapData.color_map = arg0;
			Sango.Render.MapData.color_map = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bounds(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Sango.Render.MapData obj = (Sango.Render.MapData)o;
			UnityEngine.Vector2Int arg0 = StackTraits<UnityEngine.Vector2Int>.Check(L, 2);
			obj.bounds = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bounds on a nil value");
		}
	}
}

