//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class WindowDialogWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(WindowDialog), typeof(System.Object));
		L.RegFunction("OpenFileDialog", new LuaCSFunction(OpenFileDialog));
		L.RegFunction("SaveFileDialog", new LuaCSFunction(SaveFileDialog));
		L.RegFunction("New", new LuaCSFunction(_CreateWindowDialog));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("lastOpenDir", new LuaCSFunction(get_lastOpenDir), new LuaCSFunction(set_lastOpenDir));
		L.RegConstant("OFN_READONLY", 1);
		L.RegConstant("OFN_OVERWRITEPROMPT", 2);
		L.RegConstant("OFN_HIDEREADONLY", 4);
		L.RegConstant("OFN_NOCHANGEDIR", 8);
		L.RegConstant("OFN_SHOWHELP", 16);
		L.RegConstant("OFN_ENABLEHOOK", 32);
		L.RegConstant("OFN_ENABLETEMPLATE", 64);
		L.RegConstant("OFN_ENABLETEMPLATEHANDLE", 128);
		L.RegConstant("OFN_NOVALIDATE", 256);
		L.RegConstant("OFN_ALLOWMULTISELECT", 512);
		L.RegConstant("OFN_EXTENSIONDIFFERENT", 1024);
		L.RegConstant("OFN_PATHMUSTEXIST", 2048);
		L.RegConstant("OFN_FILEMUSTEXIST", 4096);
		L.RegConstant("OFN_CREATEPROMPT", 8192);
		L.RegConstant("OFN_SHAREAWARE", 16384);
		L.RegConstant("OFN_NOREADONLYRETURN", 32768);
		L.RegConstant("OFN_NOTESTFILECREATE", 65536);
		L.RegConstant("OFN_NONETWORKBUTTON", 131072);
		L.RegConstant("OFN_NOLONGNAMES", 262144);
		L.RegConstant("OFN_EXPLORER", 524288);
		L.RegConstant("OFN_NODEREFERENCELINKS", 1048576);
		L.RegConstant("OFN_LONGNAMES", 2097152);
		L.RegConstant("OFN_ENABLEINCLUDENOTIFY", 4194304);
		L.RegConstant("OFN_ENABLESIZING", 8388608);
		L.RegConstant("OFN_DONTADDTORECENT", 33554432);
		L.RegConstant("OFN_FORCESHOWHIDDEN", 268435456);
		L.RegConstant("OFN_EX_NOPLACESBAR", 1);
		L.RegConstant("OFN_SHAREFALLTHROUGH", 2);
		L.RegConstant("OFN_SHARENOWARN", 1);
		L.RegConstant("OFN_SHAREWARN", 0);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateWindowDialog(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				WindowDialog obj = new WindowDialog();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: WindowDialog.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenFileDialog(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string[] o = WindowDialog.OpenFileDialog(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<bool>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				string[] o = WindowDialog.OpenFileDialog(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				string[] o = WindowDialog.OpenFileDialog(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<bool>(L, 3))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				string[] o = WindowDialog.OpenFileDialog(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string>(L, 3))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				string[] o = WindowDialog.OpenFileDialog(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				string[] o = WindowDialog.OpenFileDialog(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WindowDialog.OpenFileDialog");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveFileDialog(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string o = WindowDialog.SaveFileDialog(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				string o = WindowDialog.SaveFileDialog(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				string o = WindowDialog.SaveFileDialog(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WindowDialog.SaveFileDialog");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lastOpenDir(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, WindowDialog.lastOpenDir);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lastOpenDir(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			WindowDialog.lastOpenDir = arg0;
			WindowDialog.lastOpenDir = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

