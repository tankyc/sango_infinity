//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_ScriptsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Sango.Scripts), typeof(Sango.Singletion<Sango.Scripts>));
		L.RegFunction("DoFile", new LuaCSFunction(DoFile));
		L.RegFunction("DoString", new LuaCSFunction(DoString));
		L.RegFunction("PostMessage", new LuaCSFunction(PostMessage));
		L.RegFunction("PostMessageToMainThread", new LuaCSFunction(PostMessageToMainThread));
		L.RegFunction("OnUpdate", new LuaCSFunction(OnUpdate));
		L.RegFunction("Init", new LuaCSFunction(Init));
		L.RegFunction("GetTable", new LuaCSFunction(GetTable));
		L.RegFunction("GetFunction", new LuaCSFunction(GetFunction));
		L.RegFunction("Reload", new LuaCSFunction(Reload));
		L.RegFunction("Clear", new LuaCSFunction(Clear));
		L.RegFunction("LoadFile", new LuaCSFunction(LoadFile));
		L.RegFunction("New", new LuaCSFunction(_CreateSango_Scripts));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSango_Scripts(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Sango.Scripts obj = new Sango.Scripts();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Sango.Scripts.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Scripts obj = (Sango.Scripts)ToLua.CheckObject<Sango.Scripts>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.DoFile(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Scripts obj = (Sango.Scripts)ToLua.CheckObject<Sango.Scripts>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.DoString(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PostMessage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			Sango.Scripts obj = (Sango.Scripts)ToLua.CheckObject<Sango.Scripts>(L, 1);
			object[] arg0 = ToLua.ToParamsObject(L, 2, count - 1);
			obj.PostMessage(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PostMessageToMainThread(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			Sango.Scripts obj = (Sango.Scripts)ToLua.CheckObject<Sango.Scripts>(L, 1);
			object[] arg0 = ToLua.ToParamsObject(L, 2, count - 1);
			obj.PostMessageToMainThread(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Scripts obj = (Sango.Scripts)ToLua.CheckObject<Sango.Scripts>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.OnUpdate(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Scripts obj = (Sango.Scripts)ToLua.CheckObject<Sango.Scripts>(L, 1);
			bool o = obj.Init();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Scripts obj = (Sango.Scripts)ToLua.CheckObject<Sango.Scripts>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			LuaInterface.LuaTable o = obj.GetTable(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFunction(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Scripts obj = (Sango.Scripts)ToLua.CheckObject<Sango.Scripts>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			LuaInterface.LuaFunction o = obj.GetFunction(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reload(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Scripts obj = (Sango.Scripts)ToLua.CheckObject<Sango.Scripts>(L, 1);
			bool o = obj.Reload();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Sango.Scripts obj = (Sango.Scripts)ToLua.CheckObject<Sango.Scripts>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			byte[] o = Sango.Scripts.LoadFile(arg0);
			LuaDLL.tolua_pushlstring(L, o, o.Length);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

