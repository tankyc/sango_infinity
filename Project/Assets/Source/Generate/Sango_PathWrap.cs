//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_PathWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("Path");
		L.RegFunction("Init", new LuaCSFunction(Init));
		L.RegFunction("AddSearchPath", new LuaCSFunction(AddSearchPath));
		L.RegFunction("GetFiles", new LuaCSFunction(GetFiles));
		L.RegFunction("RemoveSearchPath", new LuaCSFunction(RemoveSearchPath));
		L.RegFunction("FindFile", new LuaCSFunction(FindFile));
		L.RegFunction("FindDirectory", new LuaCSFunction(FindDirectory));
		L.RegFunction("IsPathRooted", new LuaCSFunction(IsPathRooted));
		L.RegVar("ContentRootPath", new LuaCSFunction(get_ContentRootPath), null);
		L.RegVar("ModRootPath", new LuaCSFunction(get_ModRootPath), null);
		L.RegVar("SaveRootPath", new LuaCSFunction(get_SaveRootPath), null);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Sango.Path.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSearchPath(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool o = Sango.Path.AddSearchPath(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				bool o = Sango.Path.AddSearchPath(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Path.AddSearchPath");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFiles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			System.IO.SearchOption arg2 = (System.IO.SearchOption)ToLua.CheckObject(L, 3, TypeTraits<System.IO.SearchOption>.type);
			string[] o = Sango.Path.GetFiles(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveSearchPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = Sango.Path.RemoveSearchPath(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = Sango.Path.FindFile(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindDirectory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = Sango.Path.FindDirectory(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsPathRooted(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = Sango.Path.IsPathRooted(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ContentRootPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Sango.Path.ContentRootPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ModRootPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Sango.Path.ModRootPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SaveRootPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Sango.Path.SaveRootPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

