//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_PlatformUtilityWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("PlatformUtility");
		L.RegFunction("Init", new LuaCSFunction(Init));
		L.RegFunction("GetApplicationVersion", new LuaCSFunction(GetApplicationVersion));
		L.RegFunction("GetResourceVersion", new LuaCSFunction(GetResourceVersion));
		L.RegFunction("GetPlatformName", new LuaCSFunction(GetPlatformName));
		L.RegFunction("GetBundleIdentifier", new LuaCSFunction(GetBundleIdentifier));
		L.RegFunction("GetCompanyName", new LuaCSFunction(GetCompanyName));
		L.RegFunction("GetProductName", new LuaCSFunction(GetProductName));
		L.RegFunction("GetPhoneModel", new LuaCSFunction(GetPhoneModel));
		L.RegFunction("InstallApp", new LuaCSFunction(InstallApp));
		L.RegFunction("GetDeviceId", new LuaCSFunction(GetDeviceId));
		L.RegFunction("Restart", new LuaCSFunction(Restart));
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Sango.PlatformUtility.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetApplicationVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = Sango.PlatformUtility.GetApplicationVersion();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResourceVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = Sango.PlatformUtility.GetResourceVersion();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlatformName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = Sango.PlatformUtility.GetPlatformName();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBundleIdentifier(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = Sango.PlatformUtility.GetBundleIdentifier();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCompanyName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = Sango.PlatformUtility.GetCompanyName();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetProductName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = Sango.PlatformUtility.GetProductName();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPhoneModel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = Sango.PlatformUtility.GetPhoneModel();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InstallApp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			Sango.PlatformUtility.InstallApp(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDeviceId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = Sango.PlatformUtility.GetDeviceId();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Restart(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Sango.PlatformUtility.Restart();
				return 0;
			}
			else if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checkinteger(L, 1);
				Sango.PlatformUtility.Restart(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.PlatformUtility.Restart");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

