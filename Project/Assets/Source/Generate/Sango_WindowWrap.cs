//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Sango_WindowWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Sango.Window), typeof(Sango.Singletion<Sango.Window>));
		L.RegFunction("AddPackage", new LuaCSFunction(AddPackage));
		L.RegFunction("FindPackage", new LuaCSFunction(FindPackage));
		L.RegFunction("RegisterWindow", new LuaCSFunction(RegisterWindow));
		L.RegFunction("FindPeerTable", new LuaCSFunction(FindPeerTable));
		L.RegFunction("CreateWindow", new LuaCSFunction(CreateWindow));
		L.RegFunction("Init", new LuaCSFunction(Init));
		L.RegFunction("ShowWindow", new LuaCSFunction(ShowWindow));
		L.RegFunction("HideWindow", new LuaCSFunction(HideWindow));
		L.RegFunction("NewWindow", new LuaCSFunction(NewWindow));
		L.RegFunction("New", new LuaCSFunction(_CreateSango_Window));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSango_Window(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Sango.Window obj = new Sango.Window();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Sango.Window.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPackage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Window obj = (Sango.Window)ToLua.CheckObject<Sango.Window>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			bool o = obj.AddPackage(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindPackage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Window obj = (Sango.Window)ToLua.CheckObject<Sango.Window>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string o = obj.FindPackage(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				Sango.Window obj = (Sango.Window)ToLua.CheckObject<Sango.Window>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				obj.RegisterWindow(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				Sango.Window obj = (Sango.Window)ToLua.CheckObject<Sango.Window>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				obj.RegisterWindow(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Sango.Window.RegisterWindow");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindPeerTable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Window obj = (Sango.Window)ToLua.CheckObject<Sango.Window>(L, 1);
			Sango.Window.WindowInfo arg0 = StackTraits<Sango.Window.WindowInfo>.Check(L, 2);
			LuaInterface.LuaTable o = obj.FindPeerTable(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Window obj = (Sango.Window)ToLua.CheckObject<Sango.Window>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			Sango.Window.WindowInterface o = obj.CreateWindow(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Sango.Window obj = (Sango.Window)ToLua.CheckObject<Sango.Window>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			obj.Init(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Window obj = (Sango.Window)ToLua.CheckObject<Sango.Window>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			Sango.Window.WindowInterface o = obj.ShowWindow(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Window obj = (Sango.Window)ToLua.CheckObject<Sango.Window>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.HideWindow(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NewWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Sango.Window obj = (Sango.Window)ToLua.CheckObject<Sango.Window>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			Sango.Window.WindowInterface o = obj.NewWindow(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

