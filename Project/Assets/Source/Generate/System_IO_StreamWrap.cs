//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_IO_StreamWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.IO.Stream), typeof(System.MarshalByRefObject));
		L.RegFunction("CopyToAsync", new LuaCSFunction(CopyToAsync));
		L.RegFunction("CopyTo", new LuaCSFunction(CopyTo));
		L.RegFunction("Close", new LuaCSFunction(Close));
		L.RegFunction("Dispose", new LuaCSFunction(Dispose));
		L.RegFunction("Flush", new LuaCSFunction(Flush));
		L.RegFunction("FlushAsync", new LuaCSFunction(FlushAsync));
		L.RegFunction("BeginRead", new LuaCSFunction(BeginRead));
		L.RegFunction("EndRead", new LuaCSFunction(EndRead));
		L.RegFunction("ReadAsync", new LuaCSFunction(ReadAsync));
		L.RegFunction("BeginWrite", new LuaCSFunction(BeginWrite));
		L.RegFunction("EndWrite", new LuaCSFunction(EndWrite));
		L.RegFunction("WriteAsync", new LuaCSFunction(WriteAsync));
		L.RegFunction("Seek", new LuaCSFunction(Seek));
		L.RegFunction("SetLength", new LuaCSFunction(SetLength));
		L.RegFunction("Read", new LuaCSFunction(Read));
		L.RegFunction("ReadByte", new LuaCSFunction(ReadByte));
		L.RegFunction("Write", new LuaCSFunction(Write));
		L.RegFunction("WriteByte", new LuaCSFunction(WriteByte));
		L.RegFunction("Synchronized", new LuaCSFunction(Synchronized));
		L.RegFunction("DisposeAsync", new LuaCSFunction(DisposeAsync));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("Null", new LuaCSFunction(get_Null), null);
		L.RegVar("CanRead", new LuaCSFunction(get_CanRead), null);
		L.RegVar("CanSeek", new LuaCSFunction(get_CanSeek), null);
		L.RegVar("CanTimeout", new LuaCSFunction(get_CanTimeout), null);
		L.RegVar("CanWrite", new LuaCSFunction(get_CanWrite), null);
		L.RegVar("Length", new LuaCSFunction(get_Length), null);
		L.RegVar("Position", new LuaCSFunction(get_Position), new LuaCSFunction(set_Position));
		L.RegVar("ReadTimeout", new LuaCSFunction(get_ReadTimeout), new LuaCSFunction(set_ReadTimeout));
		L.RegVar("WriteTimeout", new LuaCSFunction(get_WriteTimeout), new LuaCSFunction(set_WriteTimeout));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyToAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 2);
				System.Threading.Tasks.Task o = obj.CopyToAsync(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int>(L, 3))
			{
				System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 2);
				int arg1 = (int)LuaDLL.lua_tointeger(L, 3);
				System.Threading.Tasks.Task o = obj.CopyToAsync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Threading.CancellationToken>(L, 3))
			{
				System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 2);
				System.Threading.CancellationToken arg1 = StackTraits<System.Threading.CancellationToken>.To(L, 3);
				System.Threading.Tasks.Task o = obj.CopyToAsync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				System.Threading.CancellationToken arg2 = StackTraits<System.Threading.CancellationToken>.Check(L, 4);
				System.Threading.Tasks.Task o = obj.CopyToAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.IO.Stream.CopyToAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyTo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 2);
				obj.CopyTo(arg0);
				return 0;
			}
			else if (count == 3)
			{
				System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				obj.CopyTo(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.IO.Stream.CopyTo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Flush(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
			obj.Flush();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FlushAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				System.Threading.Tasks.Task o = obj.FlushAsync();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				System.Threading.CancellationToken arg0 = StackTraits<System.Threading.CancellationToken>.Check(L, 2);
				System.Threading.Tasks.Task o = obj.FlushAsync(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.IO.Stream.FlushAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginRead(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
			System.AsyncCallback arg3 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 5);
			object arg4 = ToLua.ToVarObject(L, 6);
			System.IAsyncResult o = obj.BeginRead(arg0, arg1, arg2, arg3, arg4);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndRead(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
			int o = obj.EndRead(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				System.Memory<byte> arg0 = StackTraits<System.Memory<byte>>.Check(L, 2);
				System.Threading.Tasks.ValueTask<int> o = obj.ReadAsync(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				System.Memory<byte> arg0 = StackTraits<System.Memory<byte>>.Check(L, 2);
				System.Threading.CancellationToken arg1 = StackTraits<System.Threading.CancellationToken>.Check(L, 3);
				System.Threading.Tasks.ValueTask<int> o = obj.ReadAsync(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				System.Threading.Tasks.Task<int> o = obj.ReadAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				System.Threading.CancellationToken arg3 = StackTraits<System.Threading.CancellationToken>.Check(L, 5);
				System.Threading.Tasks.Task<int> o = obj.ReadAsync(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.IO.Stream.ReadAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginWrite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
			System.AsyncCallback arg3 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 5);
			object arg4 = ToLua.ToVarObject(L, 6);
			System.IAsyncResult o = obj.BeginWrite(arg0, arg1, arg2, arg3, arg4);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndWrite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
			obj.EndWrite(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				System.ReadOnlyMemory<byte> arg0 = StackTraits<System.ReadOnlyMemory<byte>>.Check(L, 2);
				System.Threading.Tasks.ValueTask o = obj.WriteAsync(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				System.ReadOnlyMemory<byte> arg0 = StackTraits<System.ReadOnlyMemory<byte>>.Check(L, 2);
				System.Threading.CancellationToken arg1 = StackTraits<System.Threading.CancellationToken>.Check(L, 3);
				System.Threading.Tasks.ValueTask o = obj.WriteAsync(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				System.Threading.Tasks.Task o = obj.WriteAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
				int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
				System.Threading.CancellationToken arg3 = StackTraits<System.Threading.CancellationToken>.Check(L, 5);
				System.Threading.Tasks.Task o = obj.WriteAsync(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.IO.Stream.WriteAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Seek(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			System.IO.SeekOrigin arg1 = (System.IO.SeekOrigin)ToLua.CheckObject(L, 3, TypeTraits<System.IO.SeekOrigin>.type);
			long o = obj.Seek(arg0, arg1);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.SetLength(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Read(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
			int o = obj.Read(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
			int o = obj.ReadByte();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Write(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			int arg2 = (int)LuaDLL.luaL_checkinteger(L, 4);
			obj.Write(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
			byte arg0 = (byte)LuaDLL.luaL_checkinteger(L, 2);
			obj.WriteByte(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Synchronized(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
			System.IO.Stream o = System.IO.Stream.Synchronized(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisposeAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.IO.Stream obj = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
			System.Threading.Tasks.ValueTask o = obj.DisposeAsync();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Null(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.IO.Stream.Null);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanRead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.Stream obj = (System.IO.Stream)o;
			bool ret = obj.CanRead;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanRead on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanSeek(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.Stream obj = (System.IO.Stream)o;
			bool ret = obj.CanSeek;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanSeek on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.Stream obj = (System.IO.Stream)o;
			bool ret = obj.CanTimeout;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanWrite(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.Stream obj = (System.IO.Stream)o;
			bool ret = obj.CanWrite;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanWrite on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Length(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.Stream obj = (System.IO.Stream)o;
			long ret = obj.Length;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Length on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.Stream obj = (System.IO.Stream)o;
			long ret = obj.Position;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReadTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.Stream obj = (System.IO.Stream)o;
			int ret = obj.ReadTimeout;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReadTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WriteTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.Stream obj = (System.IO.Stream)o;
			int ret = obj.WriteTimeout;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index WriteTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.Stream obj = (System.IO.Stream)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.Position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReadTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.Stream obj = (System.IO.Stream)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.ReadTimeout = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReadTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WriteTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.IO.Stream obj = (System.IO.Stream)o;
			int arg0 = (int)LuaDLL.luaL_checkinteger(L, 2);
			obj.WriteTimeout = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index WriteTimeout on a nil value");
		}
	}
}

